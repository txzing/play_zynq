// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bd_2d50_dint_0_MultiPixStream2AXIvi (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        img_V_val_0_V_dout,
        img_V_val_0_V_empty_n,
        img_V_val_0_V_read,
        img_V_val_1_V_dout,
        img_V_val_1_V_empty_n,
        img_V_val_1_V_read,
        img_V_val_2_V_dout,
        img_V_val_2_V_empty_n,
        img_V_val_2_V_read,
        m_axis_video_TDATA,
        m_axis_video_TVALID,
        m_axis_video_TREADY,
        m_axis_video_TKEEP,
        m_axis_video_TSTRB,
        m_axis_video_TUSER,
        m_axis_video_TLAST,
        m_axis_video_TID,
        m_axis_video_TDEST,
        colorFormat,
        width,
        height_assign_loc_dout,
        height_assign_loc_empty_n,
        height_assign_loc_read
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] img_V_val_0_V_dout;
input   img_V_val_0_V_empty_n;
output   img_V_val_0_V_read;
input  [7:0] img_V_val_1_V_dout;
input   img_V_val_1_V_empty_n;
output   img_V_val_1_V_read;
input  [7:0] img_V_val_2_V_dout;
input   img_V_val_2_V_empty_n;
output   img_V_val_2_V_read;
output  [23:0] m_axis_video_TDATA;
output   m_axis_video_TVALID;
input   m_axis_video_TREADY;
output  [2:0] m_axis_video_TKEEP;
output  [2:0] m_axis_video_TSTRB;
output  [0:0] m_axis_video_TUSER;
output  [0:0] m_axis_video_TLAST;
output  [0:0] m_axis_video_TID;
output  [0:0] m_axis_video_TDEST;
input  [7:0] colorFormat;
input  [31:0] width;
input  [31:0] height_assign_loc_dout;
input   height_assign_loc_empty_n;
output   height_assign_loc_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axis_video_TVALID;
reg height_assign_loc_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    img_V_val_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond9_i_i_reg_420;
reg    img_V_val_1_V_blk_n;
reg    img_V_val_2_V_blk_n;
reg    m_axis_video_TDATA_blk_n;
reg    height_assign_loc_blk_n;
reg   [31:0] t_V_1_reg_168;
reg    ap_block_state1;
wire   [7:0] colorFormat_read_read_fu_106_p2;
reg   [31:0] rows_V_reg_401;
wire   [32:0] ret_V_fu_217_p2;
wire   [0:0] exitcond8_i_i_fu_228_p2;
wire    ap_CS_fsm_state2;
wire   [31:0] i_V_fu_233_p2;
reg   [31:0] i_V_reg_415;
wire   [0:0] exitcond9_i_i_fu_239_p2;
wire    ap_block_state3_pp0_stage0_iter0;
wire    img_V_val_0_V0_status;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] j_V_fu_244_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_last_V_fu_254_p2;
reg   [0:0] tmp_last_V_reg_429;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [31:0] t_V_reg_157;
wire    ap_CS_fsm_state5;
reg   [23:0] ap_phi_mux_p_0401_0_2_0_i_i_phi_fu_182_p6;
wire   [23:0] p_Result_5_0_i_i_fu_289_p3;
wire   [23:0] ap_phi_reg_pp0_iter1_p_0401_0_2_0_i_i_reg_179;
wire   [23:0] p_Result_4_0_i_i_fu_271_p3;
wire   [23:0] p_Result_0_i_i_fu_280_p3;
reg   [23:0] ap_phi_mux_p_0401_0_2_0_1_i_i_phi_fu_193_p6;
wire   [23:0] p_Result_5_0_1_i_i_fu_324_p5;
wire   [23:0] ap_phi_reg_pp0_iter1_p_0401_0_2_0_1_i_i_reg_190;
wire   [23:0] p_Result_4_0_1_i_i_fu_298_p5;
wire   [23:0] p_Result_0_1_i_i_fu_311_p5;
reg   [23:0] ap_phi_mux_tmp_data_V_phi_fu_204_p6;
wire   [23:0] p_Result_5_0_2_i_i_fu_363_p5;
wire   [23:0] ap_phi_reg_pp0_iter1_tmp_data_V_reg_201;
wire   [23:0] p_Result_4_0_2_i_i_fu_337_p5;
wire   [23:0] p_Result_0_2_i_i_fu_350_p5;
reg    img_V_val_0_V0_update;
reg   [0:0] tmp_user_V_fu_96;
reg    ap_block_pp0_stage0_01001;
wire   [32:0] lhs_V_cast_i_i_fu_213_p1;
wire   [32:0] tmp_cast_i_i_fu_250_p1;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_70;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_i_i_fu_228_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((exitcond8_i_i_fu_228_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((exitcond8_i_i_fu_228_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond9_i_i_fu_239_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        t_V_1_reg_168 <= j_V_fu_244_p2;
    end else if (((exitcond8_i_i_fu_228_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_1_reg_168 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        t_V_reg_157 <= i_V_reg_415;
    end else if ((~((ap_start == 1'b0) | (height_assign_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_157 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond9_i_i_reg_420 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_user_V_fu_96 <= 1'd0;
    end else if ((~((ap_start == 1'b0) | (height_assign_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_user_V_fu_96 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond9_i_i_reg_420 <= exitcond9_i_i_fu_239_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_reg_415 <= i_V_fu_233_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (height_assign_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_V_reg_401 <= height_assign_loc_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond9_i_i_fu_239_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_last_V_reg_429 <= tmp_last_V_fu_254_p2;
    end
end

always @ (*) begin
    if ((exitcond9_i_i_fu_239_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_i_i_fu_228_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_70)) begin
        if ((colorFormat_read_read_fu_106_p2 == 8'd0)) begin
            ap_phi_mux_p_0401_0_2_0_1_i_i_phi_fu_193_p6 = p_Result_0_1_i_i_fu_311_p5;
        end else if ((colorFormat_read_read_fu_106_p2 == 8'd1)) begin
            ap_phi_mux_p_0401_0_2_0_1_i_i_phi_fu_193_p6 = p_Result_4_0_1_i_i_fu_298_p5;
        end else if ((~(colorFormat_read_read_fu_106_p2 == 8'd1) & ~(colorFormat_read_read_fu_106_p2 == 8'd0))) begin
            ap_phi_mux_p_0401_0_2_0_1_i_i_phi_fu_193_p6 = p_Result_5_0_1_i_i_fu_324_p5;
        end else begin
            ap_phi_mux_p_0401_0_2_0_1_i_i_phi_fu_193_p6 = ap_phi_reg_pp0_iter1_p_0401_0_2_0_1_i_i_reg_190;
        end
    end else begin
        ap_phi_mux_p_0401_0_2_0_1_i_i_phi_fu_193_p6 = ap_phi_reg_pp0_iter1_p_0401_0_2_0_1_i_i_reg_190;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_70)) begin
        if ((colorFormat_read_read_fu_106_p2 == 8'd0)) begin
            ap_phi_mux_p_0401_0_2_0_i_i_phi_fu_182_p6 = p_Result_0_i_i_fu_280_p3;
        end else if ((colorFormat_read_read_fu_106_p2 == 8'd1)) begin
            ap_phi_mux_p_0401_0_2_0_i_i_phi_fu_182_p6 = p_Result_4_0_i_i_fu_271_p3;
        end else if ((~(colorFormat_read_read_fu_106_p2 == 8'd1) & ~(colorFormat_read_read_fu_106_p2 == 8'd0))) begin
            ap_phi_mux_p_0401_0_2_0_i_i_phi_fu_182_p6 = p_Result_5_0_i_i_fu_289_p3;
        end else begin
            ap_phi_mux_p_0401_0_2_0_i_i_phi_fu_182_p6 = ap_phi_reg_pp0_iter1_p_0401_0_2_0_i_i_reg_179;
        end
    end else begin
        ap_phi_mux_p_0401_0_2_0_i_i_phi_fu_182_p6 = ap_phi_reg_pp0_iter1_p_0401_0_2_0_i_i_reg_179;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_70)) begin
        if ((colorFormat_read_read_fu_106_p2 == 8'd0)) begin
            ap_phi_mux_tmp_data_V_phi_fu_204_p6 = p_Result_0_2_i_i_fu_350_p5;
        end else if ((colorFormat_read_read_fu_106_p2 == 8'd1)) begin
            ap_phi_mux_tmp_data_V_phi_fu_204_p6 = p_Result_4_0_2_i_i_fu_337_p5;
        end else if ((~(colorFormat_read_read_fu_106_p2 == 8'd1) & ~(colorFormat_read_read_fu_106_p2 == 8'd0))) begin
            ap_phi_mux_tmp_data_V_phi_fu_204_p6 = p_Result_5_0_2_i_i_fu_363_p5;
        end else begin
            ap_phi_mux_tmp_data_V_phi_fu_204_p6 = ap_phi_reg_pp0_iter1_tmp_data_V_reg_201;
        end
    end else begin
        ap_phi_mux_tmp_data_V_phi_fu_204_p6 = ap_phi_reg_pp0_iter1_tmp_data_V_reg_201;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_i_i_fu_228_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_assign_loc_blk_n = height_assign_loc_empty_n;
    end else begin
        height_assign_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (height_assign_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_assign_loc_read = 1'b1;
    end else begin
        height_assign_loc_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond9_i_i_reg_420 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        img_V_val_0_V0_update = 1'b1;
    end else begin
        img_V_val_0_V0_update = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond9_i_i_reg_420 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_V_val_0_V_blk_n = img_V_val_0_V_empty_n;
    end else begin
        img_V_val_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond9_i_i_reg_420 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_V_val_1_V_blk_n = img_V_val_1_V_empty_n;
    end else begin
        img_V_val_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond9_i_i_reg_420 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_V_val_2_V_blk_n = img_V_val_2_V_empty_n;
    end else begin
        img_V_val_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond9_i_i_reg_420 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_TDATA_blk_n = m_axis_video_TREADY;
    end else begin
        m_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond9_i_i_reg_420 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axis_video_TVALID = 1'b1;
    end else begin
        m_axis_video_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (height_assign_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_i_i_fu_228_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond9_i_i_fu_239_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond9_i_i_fu_239_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((exitcond9_i_i_reg_420 == 1'd0) & (img_V_val_0_V0_status == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state4_io) | ((exitcond9_i_i_reg_420 == 1'd0) & (img_V_val_0_V0_status == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state4_io) | ((exitcond9_i_i_reg_420 == 1'd0) & (img_V_val_0_V0_status == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (height_assign_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((exitcond9_i_i_reg_420 == 1'd0) & (m_axis_video_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((exitcond9_i_i_reg_420 == 1'd0) & (img_V_val_0_V0_status == 1'b0));
end

always @ (*) begin
    ap_condition_70 = ((exitcond9_i_i_reg_420 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter1_p_0401_0_2_0_1_i_i_reg_190 = 'bx;

assign ap_phi_reg_pp0_iter1_p_0401_0_2_0_i_i_reg_179 = 'bx;

assign ap_phi_reg_pp0_iter1_tmp_data_V_reg_201 = 'bx;

assign colorFormat_read_read_fu_106_p2 = colorFormat;

assign exitcond8_i_i_fu_228_p2 = ((t_V_reg_157 == rows_V_reg_401) ? 1'b1 : 1'b0);

assign exitcond9_i_i_fu_239_p2 = ((t_V_1_reg_168 == width) ? 1'b1 : 1'b0);

assign i_V_fu_233_p2 = (t_V_reg_157 + 32'd1);

assign img_V_val_0_V0_status = (img_V_val_2_V_empty_n & img_V_val_1_V_empty_n & img_V_val_0_V_empty_n);

assign img_V_val_0_V_read = img_V_val_0_V0_update;

assign img_V_val_1_V_read = img_V_val_0_V0_update;

assign img_V_val_2_V_read = img_V_val_0_V0_update;

assign j_V_fu_244_p2 = (t_V_1_reg_168 + 32'd1);

assign lhs_V_cast_i_i_fu_213_p1 = width;

assign m_axis_video_TDATA = ap_phi_mux_tmp_data_V_phi_fu_204_p6;

assign m_axis_video_TDEST = 1'd0;

assign m_axis_video_TID = 1'd0;

assign m_axis_video_TKEEP = 3'd7;

assign m_axis_video_TLAST = tmp_last_V_reg_429;

assign m_axis_video_TSTRB = 3'd0;

assign m_axis_video_TUSER = tmp_user_V_fu_96;

assign p_Result_0_1_i_i_fu_311_p5 = {{ap_phi_mux_p_0401_0_2_0_i_i_phi_fu_182_p6[23:16]}, {img_V_val_2_V_dout}, {ap_phi_mux_p_0401_0_2_0_i_i_phi_fu_182_p6[7:0]}};

assign p_Result_0_2_i_i_fu_350_p5 = {{img_V_val_0_V_dout}, {ap_phi_mux_p_0401_0_2_0_1_i_i_phi_fu_193_p6[15:0]}};

assign p_Result_0_i_i_fu_280_p3 = {{16'd65535}, {img_V_val_1_V_dout}};

assign p_Result_4_0_1_i_i_fu_298_p5 = {{ap_phi_mux_p_0401_0_2_0_i_i_phi_fu_182_p6[23:16]}, {img_V_val_1_V_dout}, {ap_phi_mux_p_0401_0_2_0_i_i_phi_fu_182_p6[7:0]}};

assign p_Result_4_0_2_i_i_fu_337_p5 = {{img_V_val_2_V_dout}, {ap_phi_mux_p_0401_0_2_0_1_i_i_phi_fu_193_p6[15:0]}};

assign p_Result_4_0_i_i_fu_271_p3 = {{16'd65535}, {img_V_val_0_V_dout}};

assign p_Result_5_0_1_i_i_fu_324_p5 = {{ap_phi_mux_p_0401_0_2_0_i_i_phi_fu_182_p6[23:16]}, {img_V_val_1_V_dout}, {ap_phi_mux_p_0401_0_2_0_i_i_phi_fu_182_p6[7:0]}};

assign p_Result_5_0_2_i_i_fu_363_p5 = {{img_V_val_2_V_dout}, {ap_phi_mux_p_0401_0_2_0_1_i_i_phi_fu_193_p6[15:0]}};

assign p_Result_5_0_i_i_fu_289_p3 = {{16'd65535}, {img_V_val_0_V_dout}};

assign ret_V_fu_217_p2 = ($signed(lhs_V_cast_i_i_fu_213_p1) + $signed(33'd8589934591));

assign tmp_cast_i_i_fu_250_p1 = t_V_1_reg_168;

assign tmp_last_V_fu_254_p2 = ((tmp_cast_i_i_fu_250_p1 == ret_V_fu_217_p2) ? 1'b1 : 1'b0);

endmodule //bd_2d50_dint_0_MultiPixStream2AXIvi
