// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bd_2d50_dint_0_AXIvideo2MultiPixStr (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        s_axis_video_TDATA,
        s_axis_video_TVALID,
        s_axis_video_TREADY,
        s_axis_video_TKEEP,
        s_axis_video_TSTRB,
        s_axis_video_TUSER,
        s_axis_video_TLAST,
        s_axis_video_TID,
        s_axis_video_TDEST,
        img_V_val_0_V_din,
        img_V_val_0_V_full_n,
        img_V_val_0_V_write,
        img_V_val_1_V_din,
        img_V_val_1_V_full_n,
        img_V_val_1_V_write,
        img_V_val_2_V_din,
        img_V_val_2_V_full_n,
        img_V_val_2_V_write,
        colorFormat,
        width,
        height,
        even_dout,
        even_empty_n,
        even_read,
        field_id1_V_din,
        field_id1_V_full_n,
        field_id1_V_write,
        field_id2_V_din,
        field_id2_V_full_n,
        field_id2_V_write
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_pp1_stage0 = 8'd16;
parameter    ap_ST_fsm_state7 = 8'd32;
parameter    ap_ST_fsm_state8 = 8'd64;
parameter    ap_ST_fsm_state9 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [23:0] s_axis_video_TDATA;
input   s_axis_video_TVALID;
output   s_axis_video_TREADY;
input  [2:0] s_axis_video_TKEEP;
input  [2:0] s_axis_video_TSTRB;
input  [0:0] s_axis_video_TUSER;
input  [0:0] s_axis_video_TLAST;
input  [0:0] s_axis_video_TID;
input  [0:0] s_axis_video_TDEST;
output  [7:0] img_V_val_0_V_din;
input   img_V_val_0_V_full_n;
output   img_V_val_0_V_write;
output  [7:0] img_V_val_1_V_din;
input   img_V_val_1_V_full_n;
output   img_V_val_1_V_write;
output  [7:0] img_V_val_2_V_din;
input   img_V_val_2_V_full_n;
output   img_V_val_2_V_write;
input  [7:0] colorFormat;
input  [31:0] width;
input  [31:0] height;
input  [0:0] even_dout;
input   even_empty_n;
output   even_read;
output   field_id1_V_din;
input   field_id1_V_full_n;
output   field_id1_V_write;
output   field_id2_V_din;
input   field_id2_V_full_n;
output   field_id2_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg s_axis_video_TREADY;
reg even_read;
reg field_id1_V_write;
reg field_id2_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    s_axis_video_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage0;
wire   [0:0] exitcond3_i_fu_360_p2;
wire   [0:0] sof_1_i_load_load_fu_371_p1;
reg   [0:0] ap_phi_mux_eol_i_phi_fu_237_p4;
wire    ap_CS_fsm_state8;
wire   [0:0] ap_phi_mux_eol_3_i_phi_fu_317_p4;
reg    img_V_val_0_V_blk_n;
reg    ap_enable_reg_pp1_iter1;
reg   [0:0] exitcond3_i_reg_481;
reg    img_V_val_1_V_blk_n;
reg    img_V_val_2_V_blk_n;
reg    even_blk_n;
reg    field_id1_V_blk_n;
reg   [0:0] sof_1_i_load_reg_490;
reg    field_id2_V_blk_n;
reg   [0:0] eol_reg_200;
reg   [23:0] axi_data_V_1_i_reg_211;
reg   [31:0] t_V_4_reg_222;
reg   [0:0] eol_i_reg_233;
reg   [0:0] axi_last_V_2_i_reg_245;
reg   [23:0] p_Val2_s_reg_260;
reg   [0:0] eol_2_i_reg_275;
reg    ap_block_state1;
reg   [0:0] tmp_reg_439;
reg   [23:0] tmp_data_V_reg_445;
reg   [0:0] tmp_last_V_reg_453;
wire   [0:0] sel_tmp2_fu_339_p2;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond2_i_fu_349_p2;
wire    ap_CS_fsm_state4;
wire   [31:0] i_V_fu_354_p2;
reg   [31:0] i_V_reg_476;
reg    ap_predicate_op63_read_state5;
reg    ap_block_state5_pp1_stage0_iter0;
reg    ap_predicate_op81_write_state6;
reg    ap_predicate_op82_write_state6;
wire    img_V_val_0_V1_status;
reg    ap_block_state6_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
wire   [31:0] j_V_fu_365_p2;
wire   [7:0] pix_val_2_V_2_fu_398_p3;
reg   [7:0] pix_val_2_V_2_reg_494;
wire   [7:0] pix_val_1_V_fu_405_p3;
reg   [7:0] pix_val_1_V_reg_499;
wire   [7:0] pix_val_0_V_2_fu_412_p3;
reg   [7:0] pix_val_0_V_2_reg_504;
reg    ap_block_state8;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state5;
reg   [0:0] axi_last_V_3_i_reg_290;
reg   [0:0] axi_last_V1_i_reg_169;
wire    ap_CS_fsm_state9;
reg   [23:0] axi_data_V_3_i_reg_302;
reg   [23:0] axi_data_V1_i_reg_179;
reg   [31:0] t_V_reg_189;
reg   [0:0] ap_phi_mux_eol_phi_fu_203_p4;
reg   [23:0] ap_phi_mux_axi_data_V_1_i_phi_fu_214_p4;
wire   [0:0] ap_phi_reg_pp1_iter0_axi_last_V_2_i_reg_245;
reg   [23:0] ap_phi_mux_p_Val2_s_phi_fu_264_p6;
wire   [23:0] ap_phi_reg_pp1_iter0_p_Val2_s_reg_260;
wire   [0:0] ap_phi_reg_pp1_iter0_eol_2_i_reg_275;
wire    ap_CS_fsm_state7;
reg   [0:0] eol_3_i_reg_314;
reg    ap_block_pp1_stage0_01001;
reg    img_V_val_0_V1_update;
reg   [0:0] sof_1_i_fu_96;
wire   [7:0] pix_val_2_V_fu_388_p4;
wire   [7:0] pix_val_0_V_fu_374_p4;
wire   [7:0] pix_val_1_V_2_fu_384_p1;
wire   [0:0] tmp_user_V_fu_335_p1;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_condition_93;
reg    ap_condition_258;
reg    ap_condition_204;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_i_fu_349_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state5))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((exitcond2_i_fu_349_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state5))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state5);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((exitcond2_i_fu_349_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        axi_data_V1_i_reg_179 <= tmp_data_V_reg_445;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        axi_data_V1_i_reg_179 <= axi_data_V_3_i_reg_302;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_i_reg_481 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        axi_data_V_1_i_reg_211 <= p_Val2_s_reg_260;
    end else if (((exitcond2_i_fu_349_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        axi_data_V_1_i_reg_211 <= axi_data_V1_i_reg_179;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        axi_data_V_3_i_reg_302 <= axi_data_V_1_i_reg_211;
    end else if ((~((eol_3_i_reg_314 == 1'd0) & (s_axis_video_TVALID == 1'b0)) & (eol_3_i_reg_314 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        axi_data_V_3_i_reg_302 <= s_axis_video_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        axi_last_V1_i_reg_169 <= tmp_last_V_reg_453;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        axi_last_V1_i_reg_169 <= axi_last_V_3_i_reg_290;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_eol_i_phi_fu_237_p4 == 1'd0) & (sof_1_i_fu_96 == 1'd0) & (exitcond3_i_fu_360_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        axi_last_V_2_i_reg_245 <= s_axis_video_TLAST;
    end else if ((((ap_phi_mux_eol_i_phi_fu_237_p4 == 1'd1) & (sof_1_i_fu_96 == 1'd0) & (exitcond3_i_fu_360_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((sof_1_i_load_load_fu_371_p1 == 1'd1) & (exitcond3_i_fu_360_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        axi_last_V_2_i_reg_245 <= ap_phi_mux_eol_phi_fu_203_p4;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        axi_last_V_2_i_reg_245 <= ap_phi_reg_pp1_iter0_axi_last_V_2_i_reg_245;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        axi_last_V_3_i_reg_290 <= eol_reg_200;
    end else if ((~((eol_3_i_reg_314 == 1'd0) & (s_axis_video_TVALID == 1'b0)) & (eol_3_i_reg_314 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        axi_last_V_3_i_reg_290 <= s_axis_video_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_204)) begin
        if ((1'b1 == ap_condition_258)) begin
            eol_2_i_reg_275 <= 1'd1;
        end else if ((1'b1 == ap_condition_93)) begin
            eol_2_i_reg_275 <= s_axis_video_TLAST;
        end else if (((sof_1_i_load_load_fu_371_p1 == 1'd1) & (exitcond3_i_fu_360_p2 == 1'd0))) begin
            eol_2_i_reg_275 <= ap_phi_mux_eol_phi_fu_203_p4;
        end else if ((1'b1 == 1'b1)) begin
            eol_2_i_reg_275 <= ap_phi_reg_pp1_iter0_eol_2_i_reg_275;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        eol_3_i_reg_314 <= eol_i_reg_233;
    end else if ((~((eol_3_i_reg_314 == 1'd0) & (s_axis_video_TVALID == 1'b0)) & (eol_3_i_reg_314 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        eol_3_i_reg_314 <= s_axis_video_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_i_reg_481 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        eol_i_reg_233 <= eol_2_i_reg_275;
    end else if (((exitcond2_i_fu_349_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        eol_i_reg_233 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_i_reg_481 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        eol_reg_200 <= axi_last_V_2_i_reg_245;
    end else if (((exitcond2_i_fu_349_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        eol_reg_200 <= axi_last_V1_i_reg_169;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_eol_i_phi_fu_237_p4 == 1'd0) & (sof_1_i_fu_96 == 1'd0) & (exitcond3_i_fu_360_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        p_Val2_s_reg_260 <= s_axis_video_TDATA;
    end else if ((((ap_phi_mux_eol_i_phi_fu_237_p4 == 1'd1) & (sof_1_i_fu_96 == 1'd0) & (exitcond3_i_fu_360_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((sof_1_i_load_load_fu_371_p1 == 1'd1) & (exitcond3_i_fu_360_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        p_Val2_s_reg_260 <= ap_phi_mux_axi_data_V_1_i_phi_fu_214_p4;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        p_Val2_s_reg_260 <= ap_phi_reg_pp1_iter0_p_Val2_s_reg_260;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_i_fu_360_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sof_1_i_fu_96 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sof_1_i_fu_96 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_i_fu_360_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        t_V_4_reg_222 <= j_V_fu_365_p2;
    end else if (((exitcond2_i_fu_349_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        t_V_4_reg_222 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        t_V_reg_189 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        t_V_reg_189 <= i_V_reg_476;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        exitcond3_i_reg_481 <= exitcond3_i_fu_360_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_V_reg_476 <= i_V_fu_354_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_i_fu_360_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        pix_val_0_V_2_reg_504 <= pix_val_0_V_2_fu_412_p3;
        pix_val_1_V_reg_499 <= pix_val_1_V_fu_405_p3;
        pix_val_2_V_2_reg_494 <= pix_val_2_V_2_fu_398_p3;
        sof_1_i_load_reg_490 <= sof_1_i_fu_96;
    end
end

always @ (posedge ap_clk) begin
    if (((s_axis_video_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_data_V_reg_445 <= s_axis_video_TDATA;
        tmp_last_V_reg_453 <= s_axis_video_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((~((even_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_reg_439 <= even_dout;
    end
end

always @ (*) begin
    if ((exitcond3_i_fu_360_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_i_fu_349_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond3_i_reg_481 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        ap_phi_mux_axi_data_V_1_i_phi_fu_214_p4 = p_Val2_s_reg_260;
    end else begin
        ap_phi_mux_axi_data_V_1_i_phi_fu_214_p4 = axi_data_V_1_i_reg_211;
    end
end

always @ (*) begin
    if (((exitcond3_i_reg_481 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        ap_phi_mux_eol_i_phi_fu_237_p4 = eol_2_i_reg_275;
    end else begin
        ap_phi_mux_eol_i_phi_fu_237_p4 = eol_i_reg_233;
    end
end

always @ (*) begin
    if (((exitcond3_i_reg_481 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        ap_phi_mux_eol_phi_fu_203_p4 = axi_last_V_2_i_reg_245;
    end else begin
        ap_phi_mux_eol_phi_fu_203_p4 = eol_reg_200;
    end
end

always @ (*) begin
    if (((ap_phi_mux_eol_i_phi_fu_237_p4 == 1'd0) & (sof_1_i_fu_96 == 1'd0) & (exitcond3_i_fu_360_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_p_Val2_s_phi_fu_264_p6 = s_axis_video_TDATA;
    end else if ((((ap_phi_mux_eol_i_phi_fu_237_p4 == 1'd1) & (sof_1_i_fu_96 == 1'd0) & (exitcond3_i_fu_360_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((sof_1_i_load_load_fu_371_p1 == 1'd1) & (exitcond3_i_fu_360_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        ap_phi_mux_p_Val2_s_phi_fu_264_p6 = ap_phi_mux_axi_data_V_1_i_phi_fu_214_p4;
    end else begin
        ap_phi_mux_p_Val2_s_phi_fu_264_p6 = ap_phi_reg_pp1_iter0_p_Val2_s_reg_260;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_i_fu_349_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        even_blk_n = even_empty_n;
    end else begin
        even_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((even_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        even_read = 1'b1;
    end else begin
        even_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond3_i_reg_481 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (sof_1_i_load_reg_490 == 1'd1))) begin
        field_id1_V_blk_n = field_id1_V_full_n;
    end else begin
        field_id1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op81_write_state6 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        field_id1_V_write = 1'b1;
    end else begin
        field_id1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond3_i_reg_481 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (sof_1_i_load_reg_490 == 1'd1))) begin
        field_id2_V_blk_n = field_id2_V_full_n;
    end else begin
        field_id2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op82_write_state6 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        field_id2_V_write = 1'b1;
    end else begin
        field_id2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond3_i_reg_481 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        img_V_val_0_V1_update = 1'b1;
    end else begin
        img_V_val_0_V1_update = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond3_i_reg_481 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        img_V_val_0_V_blk_n = img_V_val_0_V_full_n;
    end else begin
        img_V_val_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond3_i_reg_481 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        img_V_val_1_V_blk_n = img_V_val_1_V_full_n;
    end else begin
        img_V_val_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond3_i_reg_481 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        img_V_val_2_V_blk_n = img_V_val_2_V_full_n;
    end else begin
        img_V_val_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_phi_mux_eol_i_phi_fu_237_p4 == 1'd0) & (sof_1_i_fu_96 == 1'd0) & (exitcond3_i_fu_360_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((eol_3_i_reg_314 == 1'd0) & (1'b1 == ap_CS_fsm_state8)))) begin
        s_axis_video_TDATA_blk_n = s_axis_video_TVALID;
    end else begin
        s_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_predicate_op63_read_state5 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((s_axis_video_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | (~((eol_3_i_reg_314 == 1'd0) & (s_axis_video_TVALID == 1'b0)) & (eol_3_i_reg_314 == 1'd0) & (1'b1 == ap_CS_fsm_state8)))) begin
        s_axis_video_TREADY = 1'b1;
    end else begin
        s_axis_video_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((even_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_user_V_fu_335_p1 == 1'd0) & (s_axis_video_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((s_axis_video_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_user_V_fu_335_p1 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_i_fu_349_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((exitcond3_i_fu_360_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((exitcond3_i_fu_360_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if ((~((eol_3_i_reg_314 == 1'd0) & (s_axis_video_TVALID == 1'b0)) & (eol_3_i_reg_314 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else if ((~((eol_3_i_reg_314 == 1'd0) & (s_axis_video_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state8) & (ap_phi_mux_eol_3_i_phi_fu_317_p4 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = (((s_axis_video_TVALID == 1'b0) & (ap_predicate_op63_read_state5 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (((field_id2_V_full_n == 1'b0) & (ap_predicate_op82_write_state6 == 1'b1)) | ((field_id1_V_full_n == 1'b0) & (ap_predicate_op81_write_state6 == 1'b1)) | ((exitcond3_i_reg_481 == 1'd0) & (img_V_val_0_V1_status == 1'b0)))));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((s_axis_video_TVALID == 1'b0) & (ap_predicate_op63_read_state5 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (((field_id2_V_full_n == 1'b0) & (ap_predicate_op82_write_state6 == 1'b1)) | ((field_id1_V_full_n == 1'b0) & (ap_predicate_op81_write_state6 == 1'b1)) | ((exitcond3_i_reg_481 == 1'd0) & (img_V_val_0_V1_status == 1'b0)))));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((s_axis_video_TVALID == 1'b0) & (ap_predicate_op63_read_state5 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (((field_id2_V_full_n == 1'b0) & (ap_predicate_op82_write_state6 == 1'b1)) | ((field_id1_V_full_n == 1'b0) & (ap_predicate_op81_write_state6 == 1'b1)) | ((exitcond3_i_reg_481 == 1'd0) & (img_V_val_0_V1_status == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((even_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state5_pp1_stage0_iter0 = ((s_axis_video_TVALID == 1'b0) & (ap_predicate_op63_read_state5 == 1'b1));
end

always @ (*) begin
    ap_block_state6_pp1_stage0_iter1 = (((field_id2_V_full_n == 1'b0) & (ap_predicate_op82_write_state6 == 1'b1)) | ((field_id1_V_full_n == 1'b0) & (ap_predicate_op81_write_state6 == 1'b1)) | ((exitcond3_i_reg_481 == 1'd0) & (img_V_val_0_V1_status == 1'b0)));
end

always @ (*) begin
    ap_block_state8 = ((eol_3_i_reg_314 == 1'd0) & (s_axis_video_TVALID == 1'b0));
end

always @ (*) begin
    ap_condition_204 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001));
end

always @ (*) begin
    ap_condition_258 = ((ap_phi_mux_eol_i_phi_fu_237_p4 == 1'd1) & (sof_1_i_fu_96 == 1'd0) & (exitcond3_i_fu_360_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_93 = ((ap_phi_mux_eol_i_phi_fu_237_p4 == 1'd0) & (sof_1_i_fu_96 == 1'd0) & (exitcond3_i_fu_360_p2 == 1'd0));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_phi_mux_eol_3_i_phi_fu_317_p4 = eol_3_i_reg_314;

assign ap_phi_reg_pp1_iter0_axi_last_V_2_i_reg_245 = 'bx;

assign ap_phi_reg_pp1_iter0_eol_2_i_reg_275 = 'bx;

assign ap_phi_reg_pp1_iter0_p_Val2_s_reg_260 = 'bx;

always @ (*) begin
    ap_predicate_op63_read_state5 = ((ap_phi_mux_eol_i_phi_fu_237_p4 == 1'd0) & (sof_1_i_fu_96 == 1'd0) & (exitcond3_i_fu_360_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op81_write_state6 = ((exitcond3_i_reg_481 == 1'd0) & (sof_1_i_load_reg_490 == 1'd1));
end

always @ (*) begin
    ap_predicate_op82_write_state6 = ((exitcond3_i_reg_481 == 1'd0) & (sof_1_i_load_reg_490 == 1'd1));
end

assign exitcond2_i_fu_349_p2 = ((t_V_reg_189 == height) ? 1'b1 : 1'b0);

assign exitcond3_i_fu_360_p2 = ((t_V_4_reg_222 == width) ? 1'b1 : 1'b0);

assign field_id1_V_din = tmp_reg_439;

assign field_id2_V_din = tmp_reg_439;

assign i_V_fu_354_p2 = (t_V_reg_189 + 32'd1);

assign img_V_val_0_V1_status = (img_V_val_2_V_full_n & img_V_val_1_V_full_n & img_V_val_0_V_full_n);

assign img_V_val_0_V_din = pix_val_0_V_2_reg_504;

assign img_V_val_0_V_write = img_V_val_0_V1_update;

assign img_V_val_1_V_din = pix_val_1_V_reg_499;

assign img_V_val_1_V_write = img_V_val_0_V1_update;

assign img_V_val_2_V_din = pix_val_2_V_2_reg_494;

assign img_V_val_2_V_write = img_V_val_0_V1_update;

assign j_V_fu_365_p2 = (t_V_4_reg_222 + 32'd1);

assign pix_val_0_V_2_fu_412_p3 = ((sel_tmp2_fu_339_p2[0:0] === 1'b1) ? pix_val_0_V_fu_374_p4 : pix_val_1_V_2_fu_384_p1);

assign pix_val_0_V_fu_374_p4 = {{ap_phi_mux_p_Val2_s_phi_fu_264_p6[23:16]}};

assign pix_val_1_V_2_fu_384_p1 = ap_phi_mux_p_Val2_s_phi_fu_264_p6[7:0];

assign pix_val_1_V_fu_405_p3 = ((sel_tmp2_fu_339_p2[0:0] === 1'b1) ? pix_val_1_V_2_fu_384_p1 : pix_val_2_V_fu_388_p4);

assign pix_val_2_V_2_fu_398_p3 = ((sel_tmp2_fu_339_p2[0:0] === 1'b1) ? pix_val_2_V_fu_388_p4 : pix_val_0_V_fu_374_p4);

assign pix_val_2_V_fu_388_p4 = {{ap_phi_mux_p_Val2_s_phi_fu_264_p6[15:8]}};

assign sel_tmp2_fu_339_p2 = ((colorFormat == 8'd0) ? 1'b1 : 1'b0);

assign sof_1_i_load_load_fu_371_p1 = sof_1_i_fu_96;

assign tmp_user_V_fu_335_p1 = s_axis_video_TUSER;

endmodule //bd_2d50_dint_0_AXIvideo2MultiPixStr
