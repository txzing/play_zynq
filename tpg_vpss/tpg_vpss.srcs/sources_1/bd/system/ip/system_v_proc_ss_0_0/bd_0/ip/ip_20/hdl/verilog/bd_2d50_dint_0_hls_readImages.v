// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bd_2d50_dint_0_hls_readImages (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_read_fb_AWVALID,
        m_axi_read_fb_AWREADY,
        m_axi_read_fb_AWADDR,
        m_axi_read_fb_AWID,
        m_axi_read_fb_AWLEN,
        m_axi_read_fb_AWSIZE,
        m_axi_read_fb_AWBURST,
        m_axi_read_fb_AWLOCK,
        m_axi_read_fb_AWCACHE,
        m_axi_read_fb_AWPROT,
        m_axi_read_fb_AWQOS,
        m_axi_read_fb_AWREGION,
        m_axi_read_fb_AWUSER,
        m_axi_read_fb_WVALID,
        m_axi_read_fb_WREADY,
        m_axi_read_fb_WDATA,
        m_axi_read_fb_WSTRB,
        m_axi_read_fb_WLAST,
        m_axi_read_fb_WID,
        m_axi_read_fb_WUSER,
        m_axi_read_fb_ARVALID,
        m_axi_read_fb_ARREADY,
        m_axi_read_fb_ARADDR,
        m_axi_read_fb_ARID,
        m_axi_read_fb_ARLEN,
        m_axi_read_fb_ARSIZE,
        m_axi_read_fb_ARBURST,
        m_axi_read_fb_ARLOCK,
        m_axi_read_fb_ARCACHE,
        m_axi_read_fb_ARPROT,
        m_axi_read_fb_ARQOS,
        m_axi_read_fb_ARREGION,
        m_axi_read_fb_ARUSER,
        m_axi_read_fb_RVALID,
        m_axi_read_fb_RREADY,
        m_axi_read_fb_RDATA,
        m_axi_read_fb_RLAST,
        m_axi_read_fb_RID,
        m_axi_read_fb_RUSER,
        m_axi_read_fb_RRESP,
        m_axi_read_fb_BVALID,
        m_axi_read_fb_BREADY,
        m_axi_read_fb_BRESP,
        m_axi_read_fb_BID,
        m_axi_read_fb_BUSER,
        read_fb_offset_dout,
        read_fb_offset_empty_n,
        read_fb_offset_read,
        tmp_6_loc_channel_dout,
        tmp_6_loc_channel_empty_n,
        tmp_6_loc_channel_read,
        prev_mat_data_stream_din,
        prev_mat_data_stream_full_n,
        prev_mat_data_stream_write,
        prev_mat_data_stream_1_din,
        prev_mat_data_stream_1_full_n,
        prev_mat_data_stream_1_write,
        prev_mat_data_stream_2_din,
        prev_mat_data_stream_2_full_n,
        prev_mat_data_stream_2_write,
        tmp_loc_channel_dout,
        tmp_loc_channel_empty_n,
        tmp_loc_channel_read,
        curr_mat_data_stream_din,
        curr_mat_data_stream_full_n,
        curr_mat_data_stream_write,
        curr_mat_data_stream_1_din,
        curr_mat_data_stream_1_full_n,
        curr_mat_data_stream_1_write,
        curr_mat_data_stream_2_din,
        curr_mat_data_stream_2_full_n,
        curr_mat_data_stream_2_write,
        algo,
        width,
        height
);

parameter    ap_ST_fsm_state1 = 218'd1;
parameter    ap_ST_fsm_state2 = 218'd2;
parameter    ap_ST_fsm_state3 = 218'd4;
parameter    ap_ST_fsm_state4 = 218'd8;
parameter    ap_ST_fsm_state5 = 218'd16;
parameter    ap_ST_fsm_state6 = 218'd32;
parameter    ap_ST_fsm_state7 = 218'd64;
parameter    ap_ST_fsm_state8 = 218'd128;
parameter    ap_ST_fsm_state9 = 218'd256;
parameter    ap_ST_fsm_state10 = 218'd512;
parameter    ap_ST_fsm_state11 = 218'd1024;
parameter    ap_ST_fsm_state12 = 218'd2048;
parameter    ap_ST_fsm_state13 = 218'd4096;
parameter    ap_ST_fsm_state14 = 218'd8192;
parameter    ap_ST_fsm_state15 = 218'd16384;
parameter    ap_ST_fsm_state16 = 218'd32768;
parameter    ap_ST_fsm_state17 = 218'd65536;
parameter    ap_ST_fsm_state18 = 218'd131072;
parameter    ap_ST_fsm_state19 = 218'd262144;
parameter    ap_ST_fsm_state20 = 218'd524288;
parameter    ap_ST_fsm_state21 = 218'd1048576;
parameter    ap_ST_fsm_state22 = 218'd2097152;
parameter    ap_ST_fsm_state23 = 218'd4194304;
parameter    ap_ST_fsm_state24 = 218'd8388608;
parameter    ap_ST_fsm_state25 = 218'd16777216;
parameter    ap_ST_fsm_state26 = 218'd33554432;
parameter    ap_ST_fsm_state27 = 218'd67108864;
parameter    ap_ST_fsm_state28 = 218'd134217728;
parameter    ap_ST_fsm_state29 = 218'd268435456;
parameter    ap_ST_fsm_state30 = 218'd536870912;
parameter    ap_ST_fsm_state31 = 218'd1073741824;
parameter    ap_ST_fsm_state32 = 218'd2147483648;
parameter    ap_ST_fsm_state33 = 218'd4294967296;
parameter    ap_ST_fsm_state34 = 218'd8589934592;
parameter    ap_ST_fsm_state35 = 218'd17179869184;
parameter    ap_ST_fsm_state36 = 218'd34359738368;
parameter    ap_ST_fsm_state37 = 218'd68719476736;
parameter    ap_ST_fsm_state38 = 218'd137438953472;
parameter    ap_ST_fsm_state39 = 218'd274877906944;
parameter    ap_ST_fsm_state40 = 218'd549755813888;
parameter    ap_ST_fsm_state41 = 218'd1099511627776;
parameter    ap_ST_fsm_state42 = 218'd2199023255552;
parameter    ap_ST_fsm_state43 = 218'd4398046511104;
parameter    ap_ST_fsm_state44 = 218'd8796093022208;
parameter    ap_ST_fsm_state45 = 218'd17592186044416;
parameter    ap_ST_fsm_state46 = 218'd35184372088832;
parameter    ap_ST_fsm_state47 = 218'd70368744177664;
parameter    ap_ST_fsm_state48 = 218'd140737488355328;
parameter    ap_ST_fsm_state49 = 218'd281474976710656;
parameter    ap_ST_fsm_state50 = 218'd562949953421312;
parameter    ap_ST_fsm_state51 = 218'd1125899906842624;
parameter    ap_ST_fsm_state52 = 218'd2251799813685248;
parameter    ap_ST_fsm_state53 = 218'd4503599627370496;
parameter    ap_ST_fsm_state54 = 218'd9007199254740992;
parameter    ap_ST_fsm_state55 = 218'd18014398509481984;
parameter    ap_ST_fsm_state56 = 218'd36028797018963968;
parameter    ap_ST_fsm_state57 = 218'd72057594037927936;
parameter    ap_ST_fsm_state58 = 218'd144115188075855872;
parameter    ap_ST_fsm_state59 = 218'd288230376151711744;
parameter    ap_ST_fsm_state60 = 218'd576460752303423488;
parameter    ap_ST_fsm_state61 = 218'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 218'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 218'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 218'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 218'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 218'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 218'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 218'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 218'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 218'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 218'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 218'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 218'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 218'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 218'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 218'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 218'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 218'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 218'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 218'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 218'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 218'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 218'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 218'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 218'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 218'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 218'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 218'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 218'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 218'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 218'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 218'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 218'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 218'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 218'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 218'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 218'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 218'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 218'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 218'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 218'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 218'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 218'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 218'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 218'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 218'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 218'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 218'd162259276829213363391578010288128;
parameter    ap_ST_fsm_pp0_stage0 = 218'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state112 = 218'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state113 = 218'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state114 = 218'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state115 = 218'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state116 = 218'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state117 = 218'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state118 = 218'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state119 = 218'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state120 = 218'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state121 = 218'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state122 = 218'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state123 = 218'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state124 = 218'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state125 = 218'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state126 = 218'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state127 = 218'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state128 = 218'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state129 = 218'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state130 = 218'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state131 = 218'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state132 = 218'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state133 = 218'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state134 = 218'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state135 = 218'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state136 = 218'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state137 = 218'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state138 = 218'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state139 = 218'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state140 = 218'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state141 = 218'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state142 = 218'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state143 = 218'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state144 = 218'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state145 = 218'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state146 = 218'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state147 = 218'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state148 = 218'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state149 = 218'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state150 = 218'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_state151 = 218'd356811923176489970264571492362373784095686656;
parameter    ap_ST_fsm_state152 = 218'd713623846352979940529142984724747568191373312;
parameter    ap_ST_fsm_state153 = 218'd1427247692705959881058285969449495136382746624;
parameter    ap_ST_fsm_state154 = 218'd2854495385411919762116571938898990272765493248;
parameter    ap_ST_fsm_state155 = 218'd5708990770823839524233143877797980545530986496;
parameter    ap_ST_fsm_state156 = 218'd11417981541647679048466287755595961091061972992;
parameter    ap_ST_fsm_state157 = 218'd22835963083295358096932575511191922182123945984;
parameter    ap_ST_fsm_state158 = 218'd45671926166590716193865151022383844364247891968;
parameter    ap_ST_fsm_state159 = 218'd91343852333181432387730302044767688728495783936;
parameter    ap_ST_fsm_state160 = 218'd182687704666362864775460604089535377456991567872;
parameter    ap_ST_fsm_state161 = 218'd365375409332725729550921208179070754913983135744;
parameter    ap_ST_fsm_state162 = 218'd730750818665451459101842416358141509827966271488;
parameter    ap_ST_fsm_state163 = 218'd1461501637330902918203684832716283019655932542976;
parameter    ap_ST_fsm_state164 = 218'd2923003274661805836407369665432566039311865085952;
parameter    ap_ST_fsm_state165 = 218'd5846006549323611672814739330865132078623730171904;
parameter    ap_ST_fsm_state166 = 218'd11692013098647223345629478661730264157247460343808;
parameter    ap_ST_fsm_state167 = 218'd23384026197294446691258957323460528314494920687616;
parameter    ap_ST_fsm_state168 = 218'd46768052394588893382517914646921056628989841375232;
parameter    ap_ST_fsm_state169 = 218'd93536104789177786765035829293842113257979682750464;
parameter    ap_ST_fsm_state170 = 218'd187072209578355573530071658587684226515959365500928;
parameter    ap_ST_fsm_state171 = 218'd374144419156711147060143317175368453031918731001856;
parameter    ap_ST_fsm_state172 = 218'd748288838313422294120286634350736906063837462003712;
parameter    ap_ST_fsm_state173 = 218'd1496577676626844588240573268701473812127674924007424;
parameter    ap_ST_fsm_state174 = 218'd2993155353253689176481146537402947624255349848014848;
parameter    ap_ST_fsm_state175 = 218'd5986310706507378352962293074805895248510699696029696;
parameter    ap_ST_fsm_state176 = 218'd11972621413014756705924586149611790497021399392059392;
parameter    ap_ST_fsm_state177 = 218'd23945242826029513411849172299223580994042798784118784;
parameter    ap_ST_fsm_state178 = 218'd47890485652059026823698344598447161988085597568237568;
parameter    ap_ST_fsm_state179 = 218'd95780971304118053647396689196894323976171195136475136;
parameter    ap_ST_fsm_state180 = 218'd191561942608236107294793378393788647952342390272950272;
parameter    ap_ST_fsm_state181 = 218'd383123885216472214589586756787577295904684780545900544;
parameter    ap_ST_fsm_state182 = 218'd766247770432944429179173513575154591809369561091801088;
parameter    ap_ST_fsm_state183 = 218'd1532495540865888858358347027150309183618739122183602176;
parameter    ap_ST_fsm_state184 = 218'd3064991081731777716716694054300618367237478244367204352;
parameter    ap_ST_fsm_state185 = 218'd6129982163463555433433388108601236734474956488734408704;
parameter    ap_ST_fsm_state186 = 218'd12259964326927110866866776217202473468949912977468817408;
parameter    ap_ST_fsm_state187 = 218'd24519928653854221733733552434404946937899825954937634816;
parameter    ap_ST_fsm_state188 = 218'd49039857307708443467467104868809893875799651909875269632;
parameter    ap_ST_fsm_state189 = 218'd98079714615416886934934209737619787751599303819750539264;
parameter    ap_ST_fsm_state190 = 218'd196159429230833773869868419475239575503198607639501078528;
parameter    ap_ST_fsm_state191 = 218'd392318858461667547739736838950479151006397215279002157056;
parameter    ap_ST_fsm_state192 = 218'd784637716923335095479473677900958302012794430558004314112;
parameter    ap_ST_fsm_state193 = 218'd1569275433846670190958947355801916604025588861116008628224;
parameter    ap_ST_fsm_state194 = 218'd3138550867693340381917894711603833208051177722232017256448;
parameter    ap_ST_fsm_state195 = 218'd6277101735386680763835789423207666416102355444464034512896;
parameter    ap_ST_fsm_state196 = 218'd12554203470773361527671578846415332832204710888928069025792;
parameter    ap_ST_fsm_state197 = 218'd25108406941546723055343157692830665664409421777856138051584;
parameter    ap_ST_fsm_state198 = 218'd50216813883093446110686315385661331328818843555712276103168;
parameter    ap_ST_fsm_state199 = 218'd100433627766186892221372630771322662657637687111424552206336;
parameter    ap_ST_fsm_state200 = 218'd200867255532373784442745261542645325315275374222849104412672;
parameter    ap_ST_fsm_state201 = 218'd401734511064747568885490523085290650630550748445698208825344;
parameter    ap_ST_fsm_state202 = 218'd803469022129495137770981046170581301261101496891396417650688;
parameter    ap_ST_fsm_state203 = 218'd1606938044258990275541962092341162602522202993782792835301376;
parameter    ap_ST_fsm_state204 = 218'd3213876088517980551083924184682325205044405987565585670602752;
parameter    ap_ST_fsm_state205 = 218'd6427752177035961102167848369364650410088811975131171341205504;
parameter    ap_ST_fsm_state206 = 218'd12855504354071922204335696738729300820177623950262342682411008;
parameter    ap_ST_fsm_state207 = 218'd25711008708143844408671393477458601640355247900524685364822016;
parameter    ap_ST_fsm_state208 = 218'd51422017416287688817342786954917203280710495801049370729644032;
parameter    ap_ST_fsm_state209 = 218'd102844034832575377634685573909834406561420991602098741459288064;
parameter    ap_ST_fsm_state210 = 218'd205688069665150755269371147819668813122841983204197482918576128;
parameter    ap_ST_fsm_state211 = 218'd411376139330301510538742295639337626245683966408394965837152256;
parameter    ap_ST_fsm_state212 = 218'd822752278660603021077484591278675252491367932816789931674304512;
parameter    ap_ST_fsm_state213 = 218'd1645504557321206042154969182557350504982735865633579863348609024;
parameter    ap_ST_fsm_state214 = 218'd3291009114642412084309938365114701009965471731267159726697218048;
parameter    ap_ST_fsm_state215 = 218'd6582018229284824168619876730229402019930943462534319453394436096;
parameter    ap_ST_fsm_state216 = 218'd13164036458569648337239753460458804039861886925068638906788872192;
parameter    ap_ST_fsm_state217 = 218'd26328072917139296674479506920917608079723773850137277813577744384;
parameter    ap_ST_fsm_state218 = 218'd52656145834278593348959013841835216159447547700274555627155488768;
parameter    ap_ST_fsm_pp1_stage0 = 218'd105312291668557186697918027683670432318895095400549111254310977536;
parameter    ap_ST_fsm_state222 = 218'd210624583337114373395836055367340864637790190801098222508621955072;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_read_fb_AWVALID;
input   m_axi_read_fb_AWREADY;
output  [31:0] m_axi_read_fb_AWADDR;
output  [0:0] m_axi_read_fb_AWID;
output  [31:0] m_axi_read_fb_AWLEN;
output  [2:0] m_axi_read_fb_AWSIZE;
output  [1:0] m_axi_read_fb_AWBURST;
output  [1:0] m_axi_read_fb_AWLOCK;
output  [3:0] m_axi_read_fb_AWCACHE;
output  [2:0] m_axi_read_fb_AWPROT;
output  [3:0] m_axi_read_fb_AWQOS;
output  [3:0] m_axi_read_fb_AWREGION;
output  [0:0] m_axi_read_fb_AWUSER;
output   m_axi_read_fb_WVALID;
input   m_axi_read_fb_WREADY;
output  [31:0] m_axi_read_fb_WDATA;
output  [3:0] m_axi_read_fb_WSTRB;
output   m_axi_read_fb_WLAST;
output  [0:0] m_axi_read_fb_WID;
output  [0:0] m_axi_read_fb_WUSER;
output   m_axi_read_fb_ARVALID;
input   m_axi_read_fb_ARREADY;
output  [31:0] m_axi_read_fb_ARADDR;
output  [0:0] m_axi_read_fb_ARID;
output  [31:0] m_axi_read_fb_ARLEN;
output  [2:0] m_axi_read_fb_ARSIZE;
output  [1:0] m_axi_read_fb_ARBURST;
output  [1:0] m_axi_read_fb_ARLOCK;
output  [3:0] m_axi_read_fb_ARCACHE;
output  [2:0] m_axi_read_fb_ARPROT;
output  [3:0] m_axi_read_fb_ARQOS;
output  [3:0] m_axi_read_fb_ARREGION;
output  [0:0] m_axi_read_fb_ARUSER;
input   m_axi_read_fb_RVALID;
output   m_axi_read_fb_RREADY;
input  [31:0] m_axi_read_fb_RDATA;
input   m_axi_read_fb_RLAST;
input  [0:0] m_axi_read_fb_RID;
input  [0:0] m_axi_read_fb_RUSER;
input  [1:0] m_axi_read_fb_RRESP;
input   m_axi_read_fb_BVALID;
output   m_axi_read_fb_BREADY;
input  [1:0] m_axi_read_fb_BRESP;
input  [0:0] m_axi_read_fb_BID;
input  [0:0] m_axi_read_fb_BUSER;
input  [29:0] read_fb_offset_dout;
input   read_fb_offset_empty_n;
output   read_fb_offset_read;
input  [22:0] tmp_6_loc_channel_dout;
input   tmp_6_loc_channel_empty_n;
output   tmp_6_loc_channel_read;
output  [7:0] prev_mat_data_stream_din;
input   prev_mat_data_stream_full_n;
output   prev_mat_data_stream_write;
output  [7:0] prev_mat_data_stream_1_din;
input   prev_mat_data_stream_1_full_n;
output   prev_mat_data_stream_1_write;
output  [7:0] prev_mat_data_stream_2_din;
input   prev_mat_data_stream_2_full_n;
output   prev_mat_data_stream_2_write;
input  [22:0] tmp_loc_channel_dout;
input   tmp_loc_channel_empty_n;
output   tmp_loc_channel_read;
output  [7:0] curr_mat_data_stream_din;
input   curr_mat_data_stream_full_n;
output   curr_mat_data_stream_write;
output  [7:0] curr_mat_data_stream_1_din;
input   curr_mat_data_stream_1_full_n;
output   curr_mat_data_stream_1_write;
output  [7:0] curr_mat_data_stream_2_din;
input   curr_mat_data_stream_2_full_n;
output   curr_mat_data_stream_2_write;
input  [7:0] algo;
input  [31:0] width;
input  [31:0] height;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_read_fb_ARVALID;
reg[31:0] m_axi_read_fb_ARADDR;
reg m_axi_read_fb_RREADY;
reg read_fb_offset_read;
reg tmp_6_loc_channel_read;
reg prev_mat_data_stream_write;
reg prev_mat_data_stream_1_write;
reg prev_mat_data_stream_2_write;
reg tmp_loc_channel_read;
reg curr_mat_data_stream_write;
reg curr_mat_data_stream_1_write;
reg curr_mat_data_stream_2_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [217:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    read_fb_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    read_fb_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond5_i_i_i_reg_450;
wire    ap_CS_fsm_state113;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond6_i_i_i_reg_485;
reg    read_fb_offset_blk_n;
reg    tmp_6_loc_channel_blk_n;
reg    prev_mat_data_stream_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] exitcond5_i_i_i_reg_450_pp0_iter1_reg;
reg    prev_mat_data_stream_1_blk_n;
reg    prev_mat_data_stream_2_blk_n;
reg    tmp_loc_channel_blk_n;
reg    curr_mat_data_stream_blk_n;
reg    ap_enable_reg_pp1_iter2;
reg   [0:0] exitcond6_i_i_i_reg_485_pp1_iter1_reg;
reg    curr_mat_data_stream_1_blk_n;
reg    curr_mat_data_stream_2_blk_n;
reg   [31:0] i_op_assign_1_i_i_reg_218;
reg   [31:0] i_op_assign_2_i_i_reg_229;
reg    ap_block_state1;
wire   [0:0] tmp_i_i_i_fu_240_p2;
wire  signed [32:0] fb_offset_cast_i_i_i_fu_246_p1;
reg  signed [32:0] fb_offset_cast_i_i_i_reg_405;
wire  signed [32:0] fb2_offset_cast_i_i_s_fu_250_p1;
reg  signed [32:0] fb2_offset_cast_i_i_s_reg_410;
wire   [32:0] sext_cast_i_i_fu_254_p1;
reg   [32:0] sext_cast_i_i_reg_415;
wire   [31:0] next_mul_i_i_fu_258_p2;
reg   [31:0] next_mul_i_i_reg_421;
wire    ap_CS_fsm_state2;
wire   [31:0] row_fu_268_p2;
reg   [31:0] row_reg_429;
wire  signed [32:0] tmp_i_i_fu_274_p1;
reg  signed [32:0] tmp_i_i_reg_434;
wire   [0:0] exitcond4_i_i_i_fu_263_p2;
wire   [32:0] sum_i_i_fu_283_p2;
reg   [32:0] sum_i_i_reg_439;
reg    ap_sig_ioackin_m_axi_read_fb_ARREADY;
wire   [0:0] exitcond5_i_i_i_fu_298_p2;
wire    ap_block_state109_pp0_stage0_iter0;
reg    ap_block_state110_pp0_stage0_iter1;
reg    ap_block_state111_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] col_fu_303_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [7:0] tmp_fu_309_p1;
reg   [7:0] tmp_reg_459;
reg   [7:0] tmp_9_reg_464;
reg   [7:0] tmp_10_reg_469;
wire   [32:0] sum3_i_i_fu_337_p2;
reg   [32:0] sum3_i_i_reg_474;
wire    ap_CS_fsm_state112;
wire   [0:0] exitcond6_i_i_i_fu_352_p2;
wire    ap_block_state219_pp1_stage0_iter0;
reg    ap_block_state220_pp1_stage0_iter1;
reg    ap_block_state221_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
wire   [31:0] col_1_fu_357_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [7:0] tmp_11_fu_363_p1;
reg   [7:0] tmp_11_reg_494;
reg   [7:0] tmp_12_reg_499;
reg   [7:0] tmp_13_reg_504;
wire    ap_CS_fsm_state108;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state109;
wire    ap_CS_fsm_state218;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state219;
reg   [31:0] i_op_assign_i_i_reg_196;
wire    ap_CS_fsm_state222;
reg  signed [31:0] off_reg_207;
wire  signed [63:0] sum_cast_i_i_fu_288_p1;
wire  signed [63:0] sum3_cast_i_i_fu_342_p1;
reg    ap_reg_ioackin_m_axi_read_fb_ARREADY;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp1_stage0_01001;
wire   [32:0] tmp_3_i_i_fu_278_p2;
wire   [32:0] tmp_5_i_i_fu_333_p2;
reg   [217:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 218'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_reg_ioackin_m_axi_read_fb_ARREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & ((exitcond4_i_i_i_fu_263_p2 == 1'd1) | (tmp_i_i_i_fu_240_p2 == 1'd1)))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state109) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state108)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state109)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state109);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state108)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state219) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state218)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state219)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state219);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state218)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_read_fb_ARREADY <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_m_axi_read_fb_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state113)) | ((ap_sig_ioackin_m_axi_read_fb_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
            ap_reg_ioackin_m_axi_read_fb_ARREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state113) & (m_axi_read_fb_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state3) & (m_axi_read_fb_ARREADY == 1'b1)))) begin
            ap_reg_ioackin_m_axi_read_fb_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond5_i_i_i_fu_298_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_op_assign_1_i_i_reg_218 <= col_fu_303_p2;
    end else if ((1'b1 == ap_CS_fsm_state108)) begin
        i_op_assign_1_i_i_reg_218 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state218)) begin
        i_op_assign_2_i_i_reg_229 <= 32'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond6_i_i_i_fu_352_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_op_assign_2_i_i_reg_229 <= col_1_fu_357_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((tmp_loc_channel_empty_n == 1'b0) | (tmp_6_loc_channel_empty_n == 1'b0) | (read_fb_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (tmp_i_i_i_fu_240_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        i_op_assign_i_i_reg_196 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state222)) begin
        i_op_assign_i_i_reg_196 <= row_reg_429;
    end
end

always @ (posedge ap_clk) begin
    if ((~((tmp_loc_channel_empty_n == 1'b0) | (tmp_6_loc_channel_empty_n == 1'b0) | (read_fb_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (tmp_i_i_i_fu_240_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        off_reg_207 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state222)) begin
        off_reg_207 <= next_mul_i_i_reg_421;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond5_i_i_i_reg_450 <= exitcond5_i_i_i_fu_298_p2;
        exitcond5_i_i_i_reg_450_pp0_iter1_reg <= exitcond5_i_i_i_reg_450;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond6_i_i_i_reg_485 <= exitcond6_i_i_i_fu_352_p2;
        exitcond6_i_i_i_reg_485_pp1_iter1_reg <= exitcond6_i_i_i_reg_485;
    end
end

always @ (posedge ap_clk) begin
    if ((~((tmp_loc_channel_empty_n == 1'b0) | (tmp_6_loc_channel_empty_n == 1'b0) | (read_fb_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (tmp_i_i_i_fu_240_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        fb2_offset_cast_i_i_s_reg_410 <= fb2_offset_cast_i_i_s_fu_250_p1;
        fb_offset_cast_i_i_i_reg_405 <= fb_offset_cast_i_i_i_fu_246_p1;
        sext_cast_i_i_reg_415[29 : 0] <= sext_cast_i_i_fu_254_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_i_i_fu_240_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        next_mul_i_i_reg_421 <= next_mul_i_i_fu_258_p2;
        row_reg_429 <= row_fu_268_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state112)) begin
        sum3_i_i_reg_474 <= sum3_i_i_fu_337_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_i_i_i_fu_263_p2 == 1'd0) & (tmp_i_i_i_fu_240_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_i_i_reg_439 <= sum_i_i_fu_283_p2;
        tmp_i_i_reg_434 <= tmp_i_i_fu_274_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond5_i_i_i_reg_450 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_10_reg_469 <= {{m_axi_read_fb_RDATA[23:16]}};
        tmp_9_reg_464 <= {{m_axi_read_fb_RDATA[15:8]}};
        tmp_reg_459 <= tmp_fu_309_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond6_i_i_i_reg_485 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_11_reg_494 <= tmp_11_fu_363_p1;
        tmp_12_reg_499 <= {{m_axi_read_fb_RDATA[15:8]}};
        tmp_13_reg_504 <= {{m_axi_read_fb_RDATA[23:16]}};
    end
end

always @ (*) begin
    if ((exitcond5_i_i_i_fu_298_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state109 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state109 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond6_i_i_i_fu_352_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state219 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state219 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((exitcond4_i_i_i_fu_263_p2 == 1'd1) | (tmp_i_i_i_fu_240_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((exitcond4_i_i_i_fu_263_p2 == 1'd1) | (tmp_i_i_i_fu_240_p2 == 1'd1)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_read_fb_ARREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_read_fb_ARREADY = m_axi_read_fb_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_read_fb_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (exitcond6_i_i_i_reg_485_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        curr_mat_data_stream_1_blk_n = curr_mat_data_stream_1_full_n;
    end else begin
        curr_mat_data_stream_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond6_i_i_i_reg_485_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        curr_mat_data_stream_1_write = 1'b1;
    end else begin
        curr_mat_data_stream_1_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (exitcond6_i_i_i_reg_485_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        curr_mat_data_stream_2_blk_n = curr_mat_data_stream_2_full_n;
    end else begin
        curr_mat_data_stream_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond6_i_i_i_reg_485_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        curr_mat_data_stream_2_write = 1'b1;
    end else begin
        curr_mat_data_stream_2_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (exitcond6_i_i_i_reg_485_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        curr_mat_data_stream_blk_n = curr_mat_data_stream_full_n;
    end else begin
        curr_mat_data_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond6_i_i_i_reg_485_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        curr_mat_data_stream_write = 1'b1;
    end else begin
        curr_mat_data_stream_write = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_read_fb_ARREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state113)) begin
            m_axi_read_fb_ARADDR = sum3_cast_i_i_fu_342_p1;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            m_axi_read_fb_ARADDR = sum_cast_i_i_fu_288_p1;
        end else begin
            m_axi_read_fb_ARADDR = 'bx;
        end
    end else begin
        m_axi_read_fb_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_m_axi_read_fb_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state113)) | ((ap_reg_ioackin_m_axi_read_fb_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state3)))) begin
        m_axi_read_fb_ARVALID = 1'b1;
    end else begin
        m_axi_read_fb_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (exitcond6_i_i_i_reg_485 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (exitcond5_i_i_i_reg_450 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        m_axi_read_fb_RREADY = 1'b1;
    end else begin
        m_axi_read_fb_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (exitcond5_i_i_i_reg_450_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        prev_mat_data_stream_1_blk_n = prev_mat_data_stream_1_full_n;
    end else begin
        prev_mat_data_stream_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond5_i_i_i_reg_450_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        prev_mat_data_stream_1_write = 1'b1;
    end else begin
        prev_mat_data_stream_1_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (exitcond5_i_i_i_reg_450_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        prev_mat_data_stream_2_blk_n = prev_mat_data_stream_2_full_n;
    end else begin
        prev_mat_data_stream_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond5_i_i_i_reg_450_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        prev_mat_data_stream_2_write = 1'b1;
    end else begin
        prev_mat_data_stream_2_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (exitcond5_i_i_i_reg_450_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        prev_mat_data_stream_blk_n = prev_mat_data_stream_full_n;
    end else begin
        prev_mat_data_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond5_i_i_i_reg_450_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        prev_mat_data_stream_write = 1'b1;
    end else begin
        prev_mat_data_stream_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state3))) begin
        read_fb_blk_n_AR = m_axi_read_fb_ARREADY;
    end else begin
        read_fb_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0) & (exitcond6_i_i_i_reg_485 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (exitcond5_i_i_i_reg_450 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        read_fb_blk_n_R = m_axi_read_fb_RVALID;
    end else begin
        read_fb_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        read_fb_offset_blk_n = read_fb_offset_empty_n;
    end else begin
        read_fb_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((tmp_loc_channel_empty_n == 1'b0) | (tmp_6_loc_channel_empty_n == 1'b0) | (read_fb_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        read_fb_offset_read = 1'b1;
    end else begin
        read_fb_offset_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_6_loc_channel_blk_n = tmp_6_loc_channel_empty_n;
    end else begin
        tmp_6_loc_channel_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((tmp_loc_channel_empty_n == 1'b0) | (tmp_6_loc_channel_empty_n == 1'b0) | (read_fb_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_6_loc_channel_read = 1'b1;
    end else begin
        tmp_6_loc_channel_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_loc_channel_blk_n = tmp_loc_channel_empty_n;
    end else begin
        tmp_loc_channel_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((tmp_loc_channel_empty_n == 1'b0) | (tmp_6_loc_channel_empty_n == 1'b0) | (read_fb_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_loc_channel_read = 1'b1;
    end else begin
        tmp_loc_channel_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((tmp_loc_channel_empty_n == 1'b0) | (tmp_6_loc_channel_empty_n == 1'b0) | (read_fb_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & ((exitcond4_i_i_i_fu_263_p2 == 1'd1) | (tmp_i_i_i_fu_240_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((ap_sig_ioackin_m_axi_read_fb_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond5_i_i_i_fu_298_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond5_i_i_i_fu_298_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state112;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            if (((ap_sig_ioackin_m_axi_read_fb_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state113))) begin
                ap_NS_fsm = ap_ST_fsm_state114;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state113;
            end
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state145;
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state147;
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            ap_NS_fsm = ap_ST_fsm_state149;
        end
        ap_ST_fsm_state149 : begin
            ap_NS_fsm = ap_ST_fsm_state150;
        end
        ap_ST_fsm_state150 : begin
            ap_NS_fsm = ap_ST_fsm_state151;
        end
        ap_ST_fsm_state151 : begin
            ap_NS_fsm = ap_ST_fsm_state152;
        end
        ap_ST_fsm_state152 : begin
            ap_NS_fsm = ap_ST_fsm_state153;
        end
        ap_ST_fsm_state153 : begin
            ap_NS_fsm = ap_ST_fsm_state154;
        end
        ap_ST_fsm_state154 : begin
            ap_NS_fsm = ap_ST_fsm_state155;
        end
        ap_ST_fsm_state155 : begin
            ap_NS_fsm = ap_ST_fsm_state156;
        end
        ap_ST_fsm_state156 : begin
            ap_NS_fsm = ap_ST_fsm_state157;
        end
        ap_ST_fsm_state157 : begin
            ap_NS_fsm = ap_ST_fsm_state158;
        end
        ap_ST_fsm_state158 : begin
            ap_NS_fsm = ap_ST_fsm_state159;
        end
        ap_ST_fsm_state159 : begin
            ap_NS_fsm = ap_ST_fsm_state160;
        end
        ap_ST_fsm_state160 : begin
            ap_NS_fsm = ap_ST_fsm_state161;
        end
        ap_ST_fsm_state161 : begin
            ap_NS_fsm = ap_ST_fsm_state162;
        end
        ap_ST_fsm_state162 : begin
            ap_NS_fsm = ap_ST_fsm_state163;
        end
        ap_ST_fsm_state163 : begin
            ap_NS_fsm = ap_ST_fsm_state164;
        end
        ap_ST_fsm_state164 : begin
            ap_NS_fsm = ap_ST_fsm_state165;
        end
        ap_ST_fsm_state165 : begin
            ap_NS_fsm = ap_ST_fsm_state166;
        end
        ap_ST_fsm_state166 : begin
            ap_NS_fsm = ap_ST_fsm_state167;
        end
        ap_ST_fsm_state167 : begin
            ap_NS_fsm = ap_ST_fsm_state168;
        end
        ap_ST_fsm_state168 : begin
            ap_NS_fsm = ap_ST_fsm_state169;
        end
        ap_ST_fsm_state169 : begin
            ap_NS_fsm = ap_ST_fsm_state170;
        end
        ap_ST_fsm_state170 : begin
            ap_NS_fsm = ap_ST_fsm_state171;
        end
        ap_ST_fsm_state171 : begin
            ap_NS_fsm = ap_ST_fsm_state172;
        end
        ap_ST_fsm_state172 : begin
            ap_NS_fsm = ap_ST_fsm_state173;
        end
        ap_ST_fsm_state173 : begin
            ap_NS_fsm = ap_ST_fsm_state174;
        end
        ap_ST_fsm_state174 : begin
            ap_NS_fsm = ap_ST_fsm_state175;
        end
        ap_ST_fsm_state175 : begin
            ap_NS_fsm = ap_ST_fsm_state176;
        end
        ap_ST_fsm_state176 : begin
            ap_NS_fsm = ap_ST_fsm_state177;
        end
        ap_ST_fsm_state177 : begin
            ap_NS_fsm = ap_ST_fsm_state178;
        end
        ap_ST_fsm_state178 : begin
            ap_NS_fsm = ap_ST_fsm_state179;
        end
        ap_ST_fsm_state179 : begin
            ap_NS_fsm = ap_ST_fsm_state180;
        end
        ap_ST_fsm_state180 : begin
            ap_NS_fsm = ap_ST_fsm_state181;
        end
        ap_ST_fsm_state181 : begin
            ap_NS_fsm = ap_ST_fsm_state182;
        end
        ap_ST_fsm_state182 : begin
            ap_NS_fsm = ap_ST_fsm_state183;
        end
        ap_ST_fsm_state183 : begin
            ap_NS_fsm = ap_ST_fsm_state184;
        end
        ap_ST_fsm_state184 : begin
            ap_NS_fsm = ap_ST_fsm_state185;
        end
        ap_ST_fsm_state185 : begin
            ap_NS_fsm = ap_ST_fsm_state186;
        end
        ap_ST_fsm_state186 : begin
            ap_NS_fsm = ap_ST_fsm_state187;
        end
        ap_ST_fsm_state187 : begin
            ap_NS_fsm = ap_ST_fsm_state188;
        end
        ap_ST_fsm_state188 : begin
            ap_NS_fsm = ap_ST_fsm_state189;
        end
        ap_ST_fsm_state189 : begin
            ap_NS_fsm = ap_ST_fsm_state190;
        end
        ap_ST_fsm_state190 : begin
            ap_NS_fsm = ap_ST_fsm_state191;
        end
        ap_ST_fsm_state191 : begin
            ap_NS_fsm = ap_ST_fsm_state192;
        end
        ap_ST_fsm_state192 : begin
            ap_NS_fsm = ap_ST_fsm_state193;
        end
        ap_ST_fsm_state193 : begin
            ap_NS_fsm = ap_ST_fsm_state194;
        end
        ap_ST_fsm_state194 : begin
            ap_NS_fsm = ap_ST_fsm_state195;
        end
        ap_ST_fsm_state195 : begin
            ap_NS_fsm = ap_ST_fsm_state196;
        end
        ap_ST_fsm_state196 : begin
            ap_NS_fsm = ap_ST_fsm_state197;
        end
        ap_ST_fsm_state197 : begin
            ap_NS_fsm = ap_ST_fsm_state198;
        end
        ap_ST_fsm_state198 : begin
            ap_NS_fsm = ap_ST_fsm_state199;
        end
        ap_ST_fsm_state199 : begin
            ap_NS_fsm = ap_ST_fsm_state200;
        end
        ap_ST_fsm_state200 : begin
            ap_NS_fsm = ap_ST_fsm_state201;
        end
        ap_ST_fsm_state201 : begin
            ap_NS_fsm = ap_ST_fsm_state202;
        end
        ap_ST_fsm_state202 : begin
            ap_NS_fsm = ap_ST_fsm_state203;
        end
        ap_ST_fsm_state203 : begin
            ap_NS_fsm = ap_ST_fsm_state204;
        end
        ap_ST_fsm_state204 : begin
            ap_NS_fsm = ap_ST_fsm_state205;
        end
        ap_ST_fsm_state205 : begin
            ap_NS_fsm = ap_ST_fsm_state206;
        end
        ap_ST_fsm_state206 : begin
            ap_NS_fsm = ap_ST_fsm_state207;
        end
        ap_ST_fsm_state207 : begin
            ap_NS_fsm = ap_ST_fsm_state208;
        end
        ap_ST_fsm_state208 : begin
            ap_NS_fsm = ap_ST_fsm_state209;
        end
        ap_ST_fsm_state209 : begin
            ap_NS_fsm = ap_ST_fsm_state210;
        end
        ap_ST_fsm_state210 : begin
            ap_NS_fsm = ap_ST_fsm_state211;
        end
        ap_ST_fsm_state211 : begin
            ap_NS_fsm = ap_ST_fsm_state212;
        end
        ap_ST_fsm_state212 : begin
            ap_NS_fsm = ap_ST_fsm_state213;
        end
        ap_ST_fsm_state213 : begin
            ap_NS_fsm = ap_ST_fsm_state214;
        end
        ap_ST_fsm_state214 : begin
            ap_NS_fsm = ap_ST_fsm_state215;
        end
        ap_ST_fsm_state215 : begin
            ap_NS_fsm = ap_ST_fsm_state216;
        end
        ap_ST_fsm_state216 : begin
            ap_NS_fsm = ap_ST_fsm_state217;
        end
        ap_ST_fsm_state217 : begin
            ap_NS_fsm = ap_ST_fsm_state218;
        end
        ap_ST_fsm_state218 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (exitcond6_i_i_i_fu_352_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (exitcond6_i_i_i_fu_352_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state222;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state222 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd216];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd109];

assign ap_CS_fsm_state113 = ap_CS_fsm[32'd110];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state218 = ap_CS_fsm[32'd215];

assign ap_CS_fsm_state222 = ap_CS_fsm[32'd217];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (((prev_mat_data_stream_2_full_n == 1'b0) & (exitcond5_i_i_i_reg_450_pp0_iter1_reg == 1'd0)) | ((prev_mat_data_stream_1_full_n == 1'b0) & (exitcond5_i_i_i_reg_450_pp0_iter1_reg == 1'd0)) | ((prev_mat_data_stream_full_n == 1'b0) & (exitcond5_i_i_i_reg_450_pp0_iter1_reg == 1'd0)))) | ((m_axi_read_fb_RVALID == 1'b0) & (exitcond5_i_i_i_reg_450 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (((prev_mat_data_stream_2_full_n == 1'b0) & (exitcond5_i_i_i_reg_450_pp0_iter1_reg == 1'd0)) | ((prev_mat_data_stream_1_full_n == 1'b0) & (exitcond5_i_i_i_reg_450_pp0_iter1_reg == 1'd0)) | ((prev_mat_data_stream_full_n == 1'b0) & (exitcond5_i_i_i_reg_450_pp0_iter1_reg == 1'd0)))) | ((m_axi_read_fb_RVALID == 1'b0) & (exitcond5_i_i_i_reg_450 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & (((prev_mat_data_stream_2_full_n == 1'b0) & (exitcond5_i_i_i_reg_450_pp0_iter1_reg == 1'd0)) | ((prev_mat_data_stream_1_full_n == 1'b0) & (exitcond5_i_i_i_reg_450_pp0_iter1_reg == 1'd0)) | ((prev_mat_data_stream_full_n == 1'b0) & (exitcond5_i_i_i_reg_450_pp0_iter1_reg == 1'd0)))) | ((m_axi_read_fb_RVALID == 1'b0) & (exitcond5_i_i_i_reg_450 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = (((ap_enable_reg_pp1_iter2 == 1'b1) & (((curr_mat_data_stream_2_full_n == 1'b0) & (exitcond6_i_i_i_reg_485_pp1_iter1_reg == 1'd0)) | ((curr_mat_data_stream_1_full_n == 1'b0) & (exitcond6_i_i_i_reg_485_pp1_iter1_reg == 1'd0)) | ((curr_mat_data_stream_full_n == 1'b0) & (exitcond6_i_i_i_reg_485_pp1_iter1_reg == 1'd0)))) | ((m_axi_read_fb_RVALID == 1'b0) & (exitcond6_i_i_i_reg_485 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((ap_enable_reg_pp1_iter2 == 1'b1) & (((curr_mat_data_stream_2_full_n == 1'b0) & (exitcond6_i_i_i_reg_485_pp1_iter1_reg == 1'd0)) | ((curr_mat_data_stream_1_full_n == 1'b0) & (exitcond6_i_i_i_reg_485_pp1_iter1_reg == 1'd0)) | ((curr_mat_data_stream_full_n == 1'b0) & (exitcond6_i_i_i_reg_485_pp1_iter1_reg == 1'd0)))) | ((m_axi_read_fb_RVALID == 1'b0) & (exitcond6_i_i_i_reg_485 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((ap_enable_reg_pp1_iter2 == 1'b1) & (((curr_mat_data_stream_2_full_n == 1'b0) & (exitcond6_i_i_i_reg_485_pp1_iter1_reg == 1'd0)) | ((curr_mat_data_stream_1_full_n == 1'b0) & (exitcond6_i_i_i_reg_485_pp1_iter1_reg == 1'd0)) | ((curr_mat_data_stream_full_n == 1'b0) & (exitcond6_i_i_i_reg_485_pp1_iter1_reg == 1'd0)))) | ((m_axi_read_fb_RVALID == 1'b0) & (exitcond6_i_i_i_reg_485 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((tmp_loc_channel_empty_n == 1'b0) | (tmp_6_loc_channel_empty_n == 1'b0) | (read_fb_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state109_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state110_pp0_stage0_iter1 = ((m_axi_read_fb_RVALID == 1'b0) & (exitcond5_i_i_i_reg_450 == 1'd0));
end

always @ (*) begin
    ap_block_state111_pp0_stage0_iter2 = (((prev_mat_data_stream_2_full_n == 1'b0) & (exitcond5_i_i_i_reg_450_pp0_iter1_reg == 1'd0)) | ((prev_mat_data_stream_1_full_n == 1'b0) & (exitcond5_i_i_i_reg_450_pp0_iter1_reg == 1'd0)) | ((prev_mat_data_stream_full_n == 1'b0) & (exitcond5_i_i_i_reg_450_pp0_iter1_reg == 1'd0)));
end

assign ap_block_state219_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state220_pp1_stage0_iter1 = ((m_axi_read_fb_RVALID == 1'b0) & (exitcond6_i_i_i_reg_485 == 1'd0));
end

always @ (*) begin
    ap_block_state221_pp1_stage0_iter2 = (((curr_mat_data_stream_2_full_n == 1'b0) & (exitcond6_i_i_i_reg_485_pp1_iter1_reg == 1'd0)) | ((curr_mat_data_stream_1_full_n == 1'b0) & (exitcond6_i_i_i_reg_485_pp1_iter1_reg == 1'd0)) | ((curr_mat_data_stream_full_n == 1'b0) & (exitcond6_i_i_i_reg_485_pp1_iter1_reg == 1'd0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign col_1_fu_357_p2 = (i_op_assign_2_i_i_reg_229 + 32'd1);

assign col_fu_303_p2 = (i_op_assign_1_i_i_reg_218 + 32'd1);

assign curr_mat_data_stream_1_din = tmp_12_reg_499;

assign curr_mat_data_stream_2_din = tmp_13_reg_504;

assign curr_mat_data_stream_din = tmp_11_reg_494;

assign exitcond4_i_i_i_fu_263_p2 = ((i_op_assign_i_i_reg_196 == height) ? 1'b1 : 1'b0);

assign exitcond5_i_i_i_fu_298_p2 = ((i_op_assign_1_i_i_reg_218 == width) ? 1'b1 : 1'b0);

assign exitcond6_i_i_i_fu_352_p2 = ((i_op_assign_2_i_i_reg_229 == width) ? 1'b1 : 1'b0);

assign fb2_offset_cast_i_i_s_fu_250_p1 = $signed(tmp_loc_channel_dout);

assign fb_offset_cast_i_i_i_fu_246_p1 = $signed(tmp_6_loc_channel_dout);

assign m_axi_read_fb_ARBURST = 2'd0;

assign m_axi_read_fb_ARCACHE = 4'd0;

assign m_axi_read_fb_ARID = 1'd0;

assign m_axi_read_fb_ARLEN = width;

assign m_axi_read_fb_ARLOCK = 2'd0;

assign m_axi_read_fb_ARPROT = 3'd0;

assign m_axi_read_fb_ARQOS = 4'd0;

assign m_axi_read_fb_ARREGION = 4'd0;

assign m_axi_read_fb_ARSIZE = 3'd0;

assign m_axi_read_fb_ARUSER = 1'd0;

assign m_axi_read_fb_AWADDR = 32'd0;

assign m_axi_read_fb_AWBURST = 2'd0;

assign m_axi_read_fb_AWCACHE = 4'd0;

assign m_axi_read_fb_AWID = 1'd0;

assign m_axi_read_fb_AWLEN = 32'd0;

assign m_axi_read_fb_AWLOCK = 2'd0;

assign m_axi_read_fb_AWPROT = 3'd0;

assign m_axi_read_fb_AWQOS = 4'd0;

assign m_axi_read_fb_AWREGION = 4'd0;

assign m_axi_read_fb_AWSIZE = 3'd0;

assign m_axi_read_fb_AWUSER = 1'd0;

assign m_axi_read_fb_AWVALID = 1'b0;

assign m_axi_read_fb_BREADY = 1'b0;

assign m_axi_read_fb_WDATA = 32'd0;

assign m_axi_read_fb_WID = 1'd0;

assign m_axi_read_fb_WLAST = 1'b0;

assign m_axi_read_fb_WSTRB = 4'd0;

assign m_axi_read_fb_WUSER = 1'd0;

assign m_axi_read_fb_WVALID = 1'b0;

assign next_mul_i_i_fu_258_p2 = ($signed(off_reg_207) + $signed(width));

assign prev_mat_data_stream_1_din = tmp_9_reg_464;

assign prev_mat_data_stream_2_din = tmp_10_reg_469;

assign prev_mat_data_stream_din = tmp_reg_459;

assign row_fu_268_p2 = (i_op_assign_i_i_reg_196 + 32'd1);

assign sext_cast_i_i_fu_254_p1 = read_fb_offset_dout;

assign sum3_cast_i_i_fu_342_p1 = $signed(sum3_i_i_reg_474);

assign sum3_i_i_fu_337_p2 = (sext_cast_i_i_reg_415 + tmp_5_i_i_fu_333_p2);

assign sum_cast_i_i_fu_288_p1 = $signed(sum_i_i_reg_439);

assign sum_i_i_fu_283_p2 = (sext_cast_i_i_reg_415 + tmp_3_i_i_fu_278_p2);

assign tmp_11_fu_363_p1 = m_axi_read_fb_RDATA[7:0];

assign tmp_3_i_i_fu_278_p2 = ($signed(fb_offset_cast_i_i_i_reg_405) + $signed(tmp_i_i_fu_274_p1));

assign tmp_5_i_i_fu_333_p2 = ($signed(fb2_offset_cast_i_i_s_reg_410) + $signed(tmp_i_i_reg_434));

assign tmp_fu_309_p1 = m_axi_read_fb_RDATA[7:0];

assign tmp_i_i_fu_274_p1 = off_reg_207;

assign tmp_i_i_i_fu_240_p2 = ((algo == 8'd6) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    sext_cast_i_i_reg_415[32:30] <= 3'b000;
end

endmodule //bd_2d50_dint_0_hls_readImages
