/*
 * main.c
 *
 *
 * * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 *  Created on: Jan 19, 2021
 *      Author: andy
 */


#include <stdio.h>
#include "sleep.h"
#include "platform.h"
#include "xparameters.h"
#include "xil_printf.h"
#include "xgpio.h"
#include "xclk_wiz.h"
#include "xv_tpg.h"
#include "xvidc.h"
#include "xvtc.h"
#include "video_resolution.h"
#include "vtiming_gen.h"
#include "PS_i2c.h"
#include "xaxivdma.h"
#include "xdebug.h"
#ifdef XPAR_INTC_0_DEVICE_ID
#include "xintc.h"
#else
#include "xscugic.h"
#endif

#define CLK_LOCK			1
XClk_Wiz ClkWiz_Dynamic; /* The instance of the ClkWiz_Dynamic */

XV_tpg Tpg;
XV_tpg_Config *Tpg_ConfigPtr;
XTpg_PatternId      Pattern;      /**< Video pattern */

XVtc		VtcInst;		/**< Instance of the VTC core. */
XVtc_Config *VtcConfig;

/*
 * Device related constants. These need to defined as per the HW system.
 */
#define DMA_DEVICE_ID		XPAR_AXIVDMA_0_DEVICE_ID

#ifdef XPAR_INTC_0_DEVICE_ID
#define INTC_DEVICE_ID		XPAR_INTC_0_DEVICE_ID
#define WRITE_INTR_ID		XPAR_INTC_0_AXIVDMA_0_S2MM_INTROUT_VEC_ID
#define READ_INTR_ID		XPAR_INTC_0_AXIVDMA_0_MM2S_INTROUT_VEC_ID
#else
#define INTC_DEVICE_ID		XPAR_SCUGIC_SINGLE_DEVICE_ID
#define WRITE_INTR_ID		XPAR_FABRIC_AXIVDMA_0_S2MM_INTROUT_VEC_ID
#define READ_INTR_ID		XPAR_FABRIC_AXIVDMA_0_MM2S_INTROUT_VEC_ID
#endif

#ifdef XPAR_AXI_7SDDR_0_S_AXI_BASEADDR
#define DDR_BASE_ADDR		XPAR_AXI_7SDDR_0_S_AXI_BASEADDR
#define DDR_HIGH_ADDR		XPAR_AXI_7SDDR_0_S_AXI_HIGHADDR
#elif XPAR_MIG7SERIES_0_BASEADDR
#define DDR_BASE_ADDR		XPAR_MIG7SERIES_0_BASEADDR
#define DDR_HIGH_ADDR	 	XPAR_MIG7SERIES_0_HIGHADDR
#elif XPAR_MIG_0_BASEADDR
#define DDR_BASE_ADDR		XPAR_MIG_0_BASEADDR
#define DDR_HIGH_ADDR	 	XPAR_MIG_0_HIGHADDR
#else
#warning CHECK FOR THE VALID DDR ADDRESS IN XPARAMETERS.H, \
			DEFAULT SET TO 0x01000000
#define DDR_BASE_ADDR		0x10000000
#define DDR_HIGH_ADDR		0x20000000
#endif


/* Memory space for the frame buffers
 *
 * This example only needs one set of frame buffers, because one video IP is
 * to write to the frame buffers, and the other video IP is to read from the
 * frame buffers.
 *
 * For 16 frames of 1080p, it needs 0x07E90000 memory for frame buffers
 */
#define MEM_BASE_ADDR		(DDR_BASE_ADDR + 0x01000000)
#define MEM_HIGH_ADDR		DDR_HIGH_ADDR
#define MEM_SPACE		(MEM_HIGH_ADDR - MEM_BASE_ADDR)


/* Read channel and write channel start from the same place
 *
 * One video IP write to the memory region, the other video IP read from it
 */
#define READ_ADDRESS_BASE	MEM_BASE_ADDR
#define WRITE_ADDRESS_BASE	MEM_BASE_ADDR

/* Frame size related constants
 */
#define FRAME_HORIZONTAL_LEN  0x1E00   /* 1920 pixels, each pixel 4 bytes */
#define FRAME_VERTICAL_LEN    0x438    /* 1080 pixels */


/* Subframe to be transferred by Video DMA
 *
 *|<----------------- FRAME_HORIZONTAL_LEN ---------------------->|
 * --------------------------------------------------------------------
 *|                                                                | ^
 *|                                                                | |
 *|               |<-SUBFRAME_HORIZONTAL_SIZE ->|                  | FRAME_
 *|               -----------------------------------              | VERTICAL_
 *|               |/////////////////////////////|  ^               | LEN
 *|               |/////////////////////////////|  |               | |
 *|               |/////////////////////////////|  |               | |
 *|               |/////////////////////////////| SUBFRAME_        | |
 *|               |/////////////////////////////| VERTICAL_        | |
 *|               |/////////////////////////////| SIZE             | |
 *|               |/////////////////////////////|  |               | |
 *|               |/////////////////////////////|  v               | |
 *|                ----------------------------------              | |
 *|                                                                | v
 *--------------------------------------------------------------------
 *
 * Note that SUBFRAME_HORIZONTAL_SIZE and SUBFRAME_VERTICAL_SIZE must ensure
 * to be inside the frame.
 */
#define SUBFRAME_START_OFFSET    (FRAME_HORIZONTAL_LEN * 5 + 64)
#define SUBFRAME_HORIZONTAL_SIZE 0x100
#define SUBFRAME_VERTICAL_SIZE   0x100

XIicPs IicInstance;
XGpio GpioOutput;

/*****************************************************************************/
/**
*
* This function generates video pattern.
*
* @param  IsPassThrough specifies either pass-through or colorbar mode.
*
* @return None.
*
* @note   None.
*
******************************************************************************/
void XV_ConfigTpg(XV_tpg *InstancePtr)
{
  XV_tpg *pTpg = InstancePtr;

//  XVidC_VideoStream *HdmiTxSsVidStreamPtr;
//  HdmiTxSsVidStreamPtr = XV_HdmiTxSs_GetVideoStream(&HdmiTxSs);

//  u32 width, height;
//  XVidC_VideoMode VideoMode;
//  VideoMode = HdmiTxSsVidStreamPtr->VmId;
//
//  if ((VideoMode == XVIDC_VM_1440x480_60_I) ||
//      (VideoMode == XVIDC_VM_1440x576_50_I) )
//  {
//	    //NTSC/PAL Support
//	    width  = HdmiTxSsVidStreamPtr->Timing.HActive/2;
//	    height = HdmiTxSsVidStreamPtr->Timing.VActive;
//  }
//  else {
//	    width  = HdmiTxSsVidStreamPtr->Timing.HActive;
//	    height = HdmiTxSsVidStreamPtr->Timing.VActive;
//  }

  //Stop TPG
  XV_tpg_DisableAutoRestart(pTpg);


  XV_tpg_Set_height(pTpg, 1080);
  xil_printf("the height is %d.\r\n",XV_tpg_Get_height(pTpg));
  XV_tpg_Set_width(pTpg, 1920);
  xil_printf("the width is %d.\r\n",XV_tpg_Get_width(pTpg));

  XV_tpg_Set_colorFormat(pTpg, XVIDC_CSF_RGB);
//  XV_tpg_Set_colorFormat(pTpg, XVIDC_CSF_YCRCB_422);
  XV_tpg_Set_bckgndId(pTpg, XTPG_BKGND_COLOR_BARS);
  //XV_tpg_Set_bckgndId(pTpg, Pattern);
  XV_tpg_Set_ovrlayId(pTpg, 0);

//  XV_tpg_Set_enableInput(pTpg, IsPassThrough);

//  if (IsPassThrough) {
//	  XV_tpg_Set_passthruStartX(pTpg,0);
//	  XV_tpg_Set_passthruStartY(pTpg,0);
//	  XV_tpg_Set_passthruEndX(pTpg,width);
//	  XV_tpg_Set_passthruEndY(pTpg,height);
//  }


  //move box
  XV_tpg_Set_ovrlayId(pTpg, 1);
  XV_tpg_Set_boxSize(pTpg,80);
  //if in YUV mode, R->Y,G->U,B->V,wrong ,it is g b r
  XV_tpg_Set_boxColorR(pTpg,255);
  XV_tpg_Set_boxColorG(pTpg,255);
  XV_tpg_Set_boxColorB(pTpg,255);
  XV_tpg_Set_motionSpeed(pTpg,1);



  //Start TPG
  XV_tpg_EnableAutoRestart(pTpg);
  XV_tpg_Start(pTpg);

  xil_printf("INFO: TPG configured\r\n");
}

/*****************************************************************************/
/**
*
* This is the Wait_For_Lock function, it will wait for lock to settle change
* frequency value
*
* @param	CfgPtr_Dynamic provides pointer to clock wizard dynamic config
*
* @return
*		- Error 0 for pass scenario
*		- Error > 0 for failure scenario
*
* @note		None
*
******************************************************************************/
int Wait_For_Lock(XClk_Wiz_Config *CfgPtr_Dynamic)
{
	u32 Count = 0;
	u32 Error = 0;

	while(!(*(u32 *)(CfgPtr_Dynamic->BaseAddr + 0x04) & CLK_LOCK)) {
		if(Count == 10000) {
			Error++;
			break;
		}
		Count++;
        }
    return Error;
}

/*****************************************************************************/
/**
*
* XClk_Wiz wizard dynamic reconfig.
*
* @param	None.
*
* @return
*		- XST_SUCCESS if XClk_Wiz dynamic reconfig ran successfully.
*		- XST_FAILURE if XClk_Wiz dynamic reconfig failed.
*
* @note		None.
*
****************************************************************************/
int XClk_Wiz_dynamic_reconfig()
{
	XClk_Wiz_Config *CfgPtr_Dynamic;
    u32 Count = 0;
    u32 Divide = 0;
    u32 Multiply_Int =0;
    u32 Multiply_Frac =0;
    u32 Divide0_Int = 0;
    u32 Divide0_Frac = 0;
    int Status;

	/*
	 * Get the CLK_WIZ Dynamic reconfiguration driver instance
	 */
	CfgPtr_Dynamic = XClk_Wiz_LookupConfig(XPAR_CLK_WIZ_0_DEVICE_ID);
	if (!CfgPtr_Dynamic) {
		return XST_FAILURE;
	}

	/*
	 * Initialize the CLK_WIZ Dynamic reconfiguration driver
	 */
	Status = XClk_Wiz_CfgInitialize(&ClkWiz_Dynamic, CfgPtr_Dynamic,
		 CfgPtr_Dynamic->BaseAddr);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}


	Status = Wait_For_Lock(CfgPtr_Dynamic);
	if(Status) {
		xil_printf("\n ERROR: Clock is not locked for default frequency" \
	" : 0x%x\n\r", *(u32 *)(CfgPtr_Dynamic->BaseAddr + 0x04) & CLK_LOCK);
	 }

	/* SW reset applied */
	*(u32 *)(CfgPtr_Dynamic->BaseAddr + 0x00) = 0xA;

	if(*(u32 *)(CfgPtr_Dynamic->BaseAddr + 0x04) & CLK_LOCK) {
		xil_printf("\n ERROR: Clock is locked : 0x%x \t expected "\
	  "0x00\n\r", *(u32 *)(CfgPtr_Dynamic->BaseAddr + 0x04) & CLK_LOCK);
	}

	/* Wait cycles after SW reset */
	for(Count = 0; Count < 2000; Count++);

	Status = Wait_For_Lock(CfgPtr_Dynamic);
	if(Status) {
		  xil_printf("\n ERROR: Clock is not locked after SW reset :"
		  "0x%x \t Expected  : 0x1\n\r",
		  *(u32 *)(CfgPtr_Dynamic->BaseAddr + 0x04) & CLK_LOCK);
	}
	// VCO = freq_in * 37.125 / 4

	Multiply_Int = 37;
	Multiply_Frac = 125;
	Divide = 4;
	/* Configuring Multiply and Divide values */
	*(u32 *)(CfgPtr_Dynamic->BaseAddr + 0x200) = (Multiply_Frac << 16) | (Multiply_Int << 8) | Divide;
	*(u32 *)(CfgPtr_Dynamic->BaseAddr + 0x204) = 0x00;

	// freq_out0 = VCO / 6.250

	Divide0_Int = 6;
	Divide0_Frac = 250;
    /* Configuring Multiply and Divide values */
    *(u32 *)(CfgPtr_Dynamic->BaseAddr + 0x208) = (Divide0_Frac << 8) | Divide0_Int;
    *(u32 *)(CfgPtr_Dynamic->BaseAddr + 0x20C) = 0x00;

    /* Load Clock Configuration Register values */
    *(u32 *)(CfgPtr_Dynamic->BaseAddr + 0x25C) = 0x07;

    if(*(u32 *)(CfgPtr_Dynamic->BaseAddr + 0x04) & CLK_LOCK) {
        xil_printf("\n ERROR: Clock is locked : 0x%x \t expected "
	    "0x00\n\r", *(u32 *)(CfgPtr_Dynamic->BaseAddr + 0x04) & CLK_LOCK);
     }

	/* Clock Configuration Registers are used for dynamic reconfiguration */
	*(u32 *)(CfgPtr_Dynamic->BaseAddr + 0x25C) = 0x02;

	Status = Wait_For_Lock(CfgPtr_Dynamic);
    if(Status)
    {
        xil_printf("\n ERROR: Clock is not locked : 0x%x \t Expected "\
        		": 0x1\n\r", *(u32 *)(CfgPtr_Dynamic->BaseAddr + 0x04) & CLK_LOCK);
    }

	return XST_SUCCESS;
}


int main()
{
	uint32_t			status;

	int i;
	int Frame;

    init_platform();

//    printf("Please wait...\n");
    xil_printf("Please wait...\n\r");

    // TODO: AXI_GPIO, cmos0_i2c

    status = XClk_Wiz_dynamic_reconfig();
	if (status != XST_SUCCESS)
	{
		xil_printf("XClk_Wiz dynamic reconfig failed.\r\n");
		return XST_FAILURE;
	}
	xil_printf("XClk_Wiz dynamic reconfig ok\n\r");


	xil_printf("TPG Initializing \r\n");
	Tpg_ConfigPtr = XV_tpg_LookupConfig(XPAR_V_TPG_0_DEVICE_ID);
    if(Tpg_ConfigPtr == NULL)
    {
    	Tpg.IsReady = 0;
        return (XST_DEVICE_NOT_FOUND);
    }

    status = XV_tpg_CfgInitialize(&Tpg,
				Tpg_ConfigPtr, Tpg_ConfigPtr->BaseAddress);
    if(status != XST_SUCCESS)
    {
        xil_printf("ERR:: TPG Initialization failed %d\r\n", status);
        return(XST_FAILURE);
    }
    xil_printf("TPG Initialization ok\r\n");

    XV_ConfigTpg(&Tpg);





    VtcConfig = XVtc_LookupConfig(XPAR_VTC_0_DEVICE_ID);
    status = XVtc_CfgInitialize(&VtcInst, VtcConfig, VtcConfig->BaseAddress);
    if(status != XST_SUCCESS)
	{
		xil_printf("VTC Initialization failed %d\r\n", status);
		return(XST_FAILURE);
	}

    vtiming_gen_run(&VtcInst, VIDEO_RESOLUTION_1080P, 2);


    i2c_init(&IicInstance, XPAR_XIICPS_0_DEVICE_ID,100000);
    XGpio_Initialize(&GpioOutput, XPAR_AXI_GPIO_0_DEVICE_ID);   //initialize GPIO IP
    XGpio_SetDataDirection(&GpioOutput, 1, 0x0);            //set GPIO as output
	XGpio_DiscreteWrite(&GpioOutput, 1, 0x0);               //set GPIO output value to 0
	usleep(50000);
	XGpio_DiscreteWrite(&GpioOutput, 1, 0x1);
	i2c_reg8_write(&IicInstance,0x72>>1,0x08,0x35);
	i2c_reg8_write(&IicInstance,0x7a>>1,0x2f,0x00);



	//Initial VDMA Driver
	vdmaConfig = XAxiVdma_LookupConfig(XPAR_AXIVDMA_0_DEVICE_ID);
	if (!vdmaConfig)
	{
		xil_printf("No video DMA found for ID %d\r\n", XPAR_AXIVDMA_0_DEVICE_ID);

	}
	status = XAxiVdma_CfgInitialize(&vdma, vdmaConfig, vdmaConfig->BaseAddress);
	if (status != XST_SUCCESS)
	{
		xil_printf("VDMA Configuration Initialization failed %d\r\n", status);
	}
	status = DisplayInitialize(&dispCtrl, &vdma, pFrames, DEMO_STRIDE);
	if (status != XST_SUCCESS)
	{
		xil_printf("Display Ctrl initialization failed during demo initialization%d\r\n", status);

	}
	status = DisplayStart(&dispCtrl);
	if (status != XST_SUCCESS)
	{
		xil_printf("Couldn't start display during demo initialization%d\r\n", status);
	}

	status = XAxiVdma_SetFrameCounter(&vdma,FrameCounter);
	if (status != XST_SUCCESS)
	{
		xil_printf("Set FrameCount Failed!");
	}
	else
	{
		XAxiVdma_GetFrameCounter(&vdma,FrameCounter);
		Frame = FrameCounter->ReadFrameCount;
		xil_printf("Read FrameCounter is %d\r\n",Frame);
	}

    cleanup_platform();
    return 0;
}

