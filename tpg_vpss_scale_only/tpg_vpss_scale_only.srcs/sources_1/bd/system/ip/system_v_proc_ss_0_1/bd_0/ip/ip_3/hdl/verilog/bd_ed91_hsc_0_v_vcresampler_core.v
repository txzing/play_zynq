// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bd_ed91_hsc_0_v_vcresampler_core (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        srcImg_V_val_0_V_dout,
        srcImg_V_val_0_V_empty_n,
        srcImg_V_val_0_V_read,
        srcImg_V_val_1_V_dout,
        srcImg_V_val_1_V_empty_n,
        srcImg_V_val_1_V_read,
        srcImg_V_val_2_V_dout,
        srcImg_V_val_2_V_empty_n,
        srcImg_V_val_2_V_read,
        HwReg_Height_dout,
        HwReg_Height_empty_n,
        HwReg_Height_read,
        HwReg_WidthOut_dout,
        HwReg_WidthOut_empty_n,
        HwReg_WidthOut_read,
        bPassThruVcr_loc_dout,
        bPassThruVcr_loc_empty_n,
        bPassThruVcr_loc_read,
        outImg_V_val_0_V_din,
        outImg_V_val_0_V_full_n,
        outImg_V_val_0_V_write,
        outImg_V_val_1_V_din,
        outImg_V_val_1_V_full_n,
        outImg_V_val_1_V_write,
        outImg_V_val_2_V_din,
        outImg_V_val_2_V_full_n,
        outImg_V_val_2_V_write,
        HwReg_Height_out_din,
        HwReg_Height_out_full_n,
        HwReg_Height_out_write,
        HwReg_WidthOut_out_din,
        HwReg_WidthOut_out_full_n,
        HwReg_WidthOut_out_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state7 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] srcImg_V_val_0_V_dout;
input   srcImg_V_val_0_V_empty_n;
output   srcImg_V_val_0_V_read;
input  [7:0] srcImg_V_val_1_V_dout;
input   srcImg_V_val_1_V_empty_n;
output   srcImg_V_val_1_V_read;
input  [7:0] srcImg_V_val_2_V_dout;
input   srcImg_V_val_2_V_empty_n;
output   srcImg_V_val_2_V_read;
input  [15:0] HwReg_Height_dout;
input   HwReg_Height_empty_n;
output   HwReg_Height_read;
input  [11:0] HwReg_WidthOut_dout;
input   HwReg_WidthOut_empty_n;
output   HwReg_WidthOut_read;
input  [0:0] bPassThruVcr_loc_dout;
input   bPassThruVcr_loc_empty_n;
output   bPassThruVcr_loc_read;
output  [7:0] outImg_V_val_0_V_din;
input   outImg_V_val_0_V_full_n;
output   outImg_V_val_0_V_write;
output  [7:0] outImg_V_val_1_V_din;
input   outImg_V_val_1_V_full_n;
output   outImg_V_val_1_V_write;
output  [7:0] outImg_V_val_2_V_din;
input   outImg_V_val_2_V_full_n;
output   outImg_V_val_2_V_write;
output  [15:0] HwReg_Height_out_din;
input   HwReg_Height_out_full_n;
output   HwReg_Height_out_write;
output  [11:0] HwReg_WidthOut_out_din;
input   HwReg_WidthOut_out_full_n;
output   HwReg_WidthOut_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg HwReg_Height_read;
reg HwReg_WidthOut_read;
reg bPassThruVcr_loc_read;
reg HwReg_Height_out_write;
reg HwReg_WidthOut_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    srcImg_V_val_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_2_i_i_reg_684;
reg    srcImg_V_val_1_V_blk_n;
reg    srcImg_V_val_2_V_blk_n;
reg    HwReg_Height_blk_n;
reg    HwReg_WidthOut_blk_n;
reg    bPassThruVcr_loc_blk_n;
reg    outImg_V_val_0_V_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] tmp_6_reg_694;
reg    outImg_V_val_1_V_blk_n;
reg    outImg_V_val_2_V_blk_n;
reg    HwReg_Height_out_blk_n;
reg    HwReg_WidthOut_out_blk_n;
reg   [11:0] out_x_reg_368;
reg   [11:0] HwReg_WidthOut_read_reg_643;
reg    ap_block_state1;
reg   [0:0] bPassThruVcr_loc_rea_reg_648;
wire   [13:0] p_cast_cast_i_i_fu_389_p1;
reg   [13:0] p_cast_cast_i_i_reg_655;
wire   [12:0] tmp_4_fu_397_p1;
reg   [12:0] tmp_4_reg_660;
wire   [12:0] tmp_5_fu_401_p2;
reg   [12:0] tmp_5_reg_665;
wire   [0:0] exitcond_fu_411_p2;
wire    ap_CS_fsm_state2;
wire   [12:0] y_fu_416_p2;
reg   [12:0] y_reg_674;
wire   [0:0] tmp_3_fu_427_p1;
reg   [0:0] tmp_3_reg_679;
wire   [0:0] tmp_2_i_i_fu_431_p2;
wire   [0:0] tmp_6_i_i_fu_436_p2;
reg   [0:0] tmp_6_i_i_reg_689;
wire   [0:0] exitcond1_fu_450_p2;
wire    ap_block_state3_pp0_stage0_iter0;
wire    srcImg_V_val_0_V0_status;
reg    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    outImg_V_val_0_V1_status;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [11:0] x_fu_455_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [11:0] linebuf_y_val_0_V_a_reg_707;
reg   [11:0] linebuf_y_val_0_V_a_reg_707_pp0_iter1_reg;
reg   [11:0] linebuf_c_val_0_V_a_reg_713;
reg   [11:0] linebuf_c_val_0_V_a_reg_713_pp0_iter1_reg;
reg   [11:0] linebuf_c_val_1_V_a_reg_719;
reg   [11:0] linebuf_c_val_1_V_a_reg_719_pp0_iter1_reg;
wire   [7:0] outpix_val_1_V_fu_548_p3;
reg   [7:0] outpix_val_1_V_reg_725;
wire   [7:0] tmp_val_0_V_2_fu_558_p3;
reg   [7:0] tmp_val_0_V_2_reg_730;
reg   [7:0] tmp_val_1_V_4_reg_735;
reg   [7:0] tmp_val_2_V_4_reg_740;
wire   [7:0] linebuf_c_val_0_V_q0;
reg   [7:0] pixbuf_c_1_val_0_V_reg_745;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg    linebuf_y_val_0_V_ce0;
reg    linebuf_y_val_0_V_we0;
reg    linebuf_y_val_0_V_ce1;
wire   [7:0] linebuf_y_val_0_V_q1;
wire   [11:0] linebuf_c_val_0_V_address0;
reg    linebuf_c_val_0_V_ce0;
reg    linebuf_c_val_0_V_ce1;
reg    linebuf_c_val_0_V_we1;
reg    linebuf_c_val_1_V_ce0;
reg    linebuf_c_val_1_V_we0;
wire   [7:0] linebuf_c_val_1_V_d0;
reg    linebuf_c_val_1_V_ce1;
wire   [7:0] linebuf_c_val_1_V_q1;
reg   [12:0] y_i_i_reg_357;
wire    ap_CS_fsm_state7;
wire   [63:0] tmp_26_i_i_fu_461_p1;
reg    outImg_V_val_0_V1_update;
reg    ap_block_pp0_stage0_01001;
reg    srcImg_V_val_0_V0_update;
reg   [7:0] tmp_val_0_V_fu_222;
reg   [7:0] tmp_val_1_V_fu_226;
reg   [7:0] tmp_val_2_V_fu_230;
reg   [7:0] tmp_val_1_V_1_fu_234;
reg   [7:0] pixbuf_y_2_val_0_V_fu_238;
wire   [0:0] not_bPassThru_i_i_fu_383_p2;
wire   [11:0] tmp_1_fu_379_p1;
wire   [12:0] tmp_2_fu_393_p1;
wire   [13:0] y_cast_cast_i_i_fu_407_p1;
wire   [13:0] out_y_fu_422_p2;
wire   [7:0] pixbuf_c_2_val_0_V_fu_484_p3;
wire   [8:0] ret_V_2_i_i_fu_497_p3;
wire   [9:0] lhs_V_cast_i_i_fu_504_p1;
wire   [9:0] rhs_V_1_cast_i_i_fu_508_p1;
wire   [8:0] rhs_V_2_cast_i_i_cas_fu_512_p1;
wire   [8:0] tmp1_fu_522_p2;
wire   [9:0] tmp_fu_516_p2;
wire   [9:0] tmp1_cast_fu_528_p1;
wire   [9:0] addconv_i_i_fu_532_p2;
wire   [7:0] p_1_i_i_fu_538_p4;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

bd_ed91_hsc_0_v_vcresampler_core_linebuf_y_val_0_V #(
    .DataWidth( 8 ),
    .AddressRange( 3840 ),
    .AddressWidth( 12 ))
linebuf_y_val_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_y_val_0_V_a_reg_707_pp0_iter1_reg),
    .ce0(linebuf_y_val_0_V_ce0),
    .we0(linebuf_y_val_0_V_we0),
    .d0(pixbuf_y_2_val_0_V_fu_238),
    .address1(linebuf_y_val_0_V_a_reg_707),
    .ce1(linebuf_y_val_0_V_ce1),
    .q1(linebuf_y_val_0_V_q1)
);

bd_ed91_hsc_0_v_vcresampler_core_linebuf_c_val_0_V #(
    .DataWidth( 8 ),
    .AddressRange( 3840 ),
    .AddressWidth( 12 ))
linebuf_c_val_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_c_val_0_V_address0),
    .ce0(linebuf_c_val_0_V_ce0),
    .q0(linebuf_c_val_0_V_q0),
    .address1(linebuf_c_val_0_V_a_reg_713_pp0_iter1_reg),
    .ce1(linebuf_c_val_0_V_ce1),
    .we1(linebuf_c_val_0_V_we1),
    .d1(tmp_val_1_V_1_fu_234)
);

bd_ed91_hsc_0_v_vcresampler_core_linebuf_y_val_0_V #(
    .DataWidth( 8 ),
    .AddressRange( 3840 ),
    .AddressWidth( 12 ))
linebuf_c_val_1_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_c_val_1_V_a_reg_719_pp0_iter1_reg),
    .ce0(linebuf_c_val_1_V_ce0),
    .we0(linebuf_c_val_1_V_we0),
    .d0(linebuf_c_val_1_V_d0),
    .address1(linebuf_c_val_1_V_a_reg_719),
    .ce1(linebuf_c_val_1_V_ce1),
    .q1(linebuf_c_val_1_V_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((exitcond_fu_411_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_411_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_411_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_fu_450_p2 == 1'd0))) begin
        out_x_reg_368 <= x_fu_455_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_411_p2 == 1'd0))) begin
        out_x_reg_368 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        y_i_i_reg_357 <= y_reg_674;
    end else if ((~((ap_start == 1'b0) | (1'b0 == HwReg_WidthOut_out_full_n) | (1'b0 == HwReg_Height_out_full_n) | (bPassThruVcr_loc_empty_n == 1'b0) | (1'b0 == HwReg_WidthOut_empty_n) | (1'b0 == HwReg_Height_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_i_i_reg_357 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (1'b0 == HwReg_WidthOut_out_full_n) | (1'b0 == HwReg_Height_out_full_n) | (bPassThruVcr_loc_empty_n == 1'b0) | (1'b0 == HwReg_WidthOut_empty_n) | (1'b0 == HwReg_Height_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_WidthOut_read_reg_643 <= HwReg_WidthOut_dout;
        bPassThruVcr_loc_rea_reg_648 <= bPassThruVcr_loc_dout;
        p_cast_cast_i_i_reg_655[0] <= p_cast_cast_i_i_fu_389_p1[0];
        tmp_4_reg_660[11 : 0] <= tmp_4_fu_397_p1[11 : 0];
        tmp_5_reg_665 <= tmp_5_fu_401_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_fu_450_p2 == 1'd0))) begin
        linebuf_c_val_0_V_a_reg_713 <= tmp_26_i_i_fu_461_p1;
        linebuf_c_val_1_V_a_reg_719 <= tmp_26_i_i_fu_461_p1;
        linebuf_y_val_0_V_a_reg_707 <= tmp_26_i_i_fu_461_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        linebuf_c_val_0_V_a_reg_713_pp0_iter1_reg <= linebuf_c_val_0_V_a_reg_713;
        linebuf_c_val_1_V_a_reg_719_pp0_iter1_reg <= linebuf_c_val_1_V_a_reg_719;
        linebuf_y_val_0_V_a_reg_707_pp0_iter1_reg <= linebuf_y_val_0_V_a_reg_707;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (bPassThruVcr_loc_rea_reg_648 == 1'd0))) begin
        outpix_val_1_V_reg_725 <= outpix_val_1_V_fu_548_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        pixbuf_c_1_val_0_V_reg_745 <= linebuf_c_val_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_i_i_reg_684 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        pixbuf_y_2_val_0_V_fu_238 <= srcImg_V_val_0_V_dout;
        tmp_val_0_V_fu_222 <= srcImg_V_val_0_V_dout;
        tmp_val_1_V_1_fu_234 <= srcImg_V_val_1_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_411_p2 == 1'd0))) begin
        tmp_2_i_i_reg_684 <= tmp_2_i_i_fu_431_p2;
        tmp_6_i_i_reg_689 <= tmp_6_i_i_fu_436_p2;
        tmp_6_reg_694 <= out_y_fu_422_p2[32'd13];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_411_p2 == 1'd0) & (bPassThruVcr_loc_rea_reg_648 == 1'd0))) begin
        tmp_3_reg_679 <= tmp_3_fu_427_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_6_reg_694 == 1'd0))) begin
        tmp_val_0_V_2_reg_730 <= tmp_val_0_V_2_fu_558_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_i_i_reg_684 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_val_1_V_4_reg_735 <= srcImg_V_val_1_V_dout;
        tmp_val_2_V_4_reg_740 <= srcImg_V_val_2_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_i_i_reg_684 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_val_1_V_fu_226 <= tmp_val_1_V_4_reg_735;
        tmp_val_2_V_fu_230 <= tmp_val_2_V_4_reg_740;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        y_reg_674 <= y_fu_416_p2;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_Height_blk_n = HwReg_Height_empty_n;
    end else begin
        HwReg_Height_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_Height_out_blk_n = HwReg_Height_out_full_n;
    end else begin
        HwReg_Height_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == HwReg_WidthOut_out_full_n) | (1'b0 == HwReg_Height_out_full_n) | (bPassThruVcr_loc_empty_n == 1'b0) | (1'b0 == HwReg_WidthOut_empty_n) | (1'b0 == HwReg_Height_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_Height_out_write = 1'b1;
    end else begin
        HwReg_Height_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == HwReg_WidthOut_out_full_n) | (1'b0 == HwReg_Height_out_full_n) | (bPassThruVcr_loc_empty_n == 1'b0) | (1'b0 == HwReg_WidthOut_empty_n) | (1'b0 == HwReg_Height_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_Height_read = 1'b1;
    end else begin
        HwReg_Height_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_WidthOut_blk_n = HwReg_WidthOut_empty_n;
    end else begin
        HwReg_WidthOut_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_WidthOut_out_blk_n = HwReg_WidthOut_out_full_n;
    end else begin
        HwReg_WidthOut_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == HwReg_WidthOut_out_full_n) | (1'b0 == HwReg_Height_out_full_n) | (bPassThruVcr_loc_empty_n == 1'b0) | (1'b0 == HwReg_WidthOut_empty_n) | (1'b0 == HwReg_Height_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_WidthOut_out_write = 1'b1;
    end else begin
        HwReg_WidthOut_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == HwReg_WidthOut_out_full_n) | (1'b0 == HwReg_Height_out_full_n) | (bPassThruVcr_loc_empty_n == 1'b0) | (1'b0 == HwReg_WidthOut_empty_n) | (1'b0 == HwReg_Height_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_WidthOut_read = 1'b1;
    end else begin
        HwReg_WidthOut_read = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond1_fu_450_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_411_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_411_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bPassThruVcr_loc_blk_n = bPassThruVcr_loc_empty_n;
    end else begin
        bPassThruVcr_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == HwReg_WidthOut_out_full_n) | (1'b0 == HwReg_Height_out_full_n) | (bPassThruVcr_loc_empty_n == 1'b0) | (1'b0 == HwReg_WidthOut_empty_n) | (1'b0 == HwReg_Height_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bPassThruVcr_loc_read = 1'b1;
    end else begin
        bPassThruVcr_loc_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        linebuf_c_val_0_V_ce0 = 1'b1;
    end else begin
        linebuf_c_val_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        linebuf_c_val_0_V_ce1 = 1'b1;
    end else begin
        linebuf_c_val_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_2_i_i_reg_684 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        linebuf_c_val_0_V_we1 = 1'b1;
    end else begin
        linebuf_c_val_0_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        linebuf_c_val_1_V_ce0 = 1'b1;
    end else begin
        linebuf_c_val_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        linebuf_c_val_1_V_ce1 = 1'b1;
    end else begin
        linebuf_c_val_1_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        linebuf_c_val_1_V_we0 = 1'b1;
    end else begin
        linebuf_c_val_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        linebuf_y_val_0_V_ce0 = 1'b1;
    end else begin
        linebuf_y_val_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        linebuf_y_val_0_V_ce1 = 1'b1;
    end else begin
        linebuf_y_val_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        linebuf_y_val_0_V_we0 = 1'b1;
    end else begin
        linebuf_y_val_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_6_reg_694 == 1'd0))) begin
        outImg_V_val_0_V1_update = 1'b1;
    end else begin
        outImg_V_val_0_V1_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (tmp_6_reg_694 == 1'd0))) begin
        outImg_V_val_0_V_blk_n = outImg_V_val_0_V_full_n;
    end else begin
        outImg_V_val_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (tmp_6_reg_694 == 1'd0))) begin
        outImg_V_val_1_V_blk_n = outImg_V_val_1_V_full_n;
    end else begin
        outImg_V_val_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (tmp_6_reg_694 == 1'd0))) begin
        outImg_V_val_2_V_blk_n = outImg_V_val_2_V_full_n;
    end else begin
        outImg_V_val_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_2_i_i_reg_684 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        srcImg_V_val_0_V0_update = 1'b1;
    end else begin
        srcImg_V_val_0_V0_update = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_2_i_i_reg_684 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        srcImg_V_val_0_V_blk_n = srcImg_V_val_0_V_empty_n;
    end else begin
        srcImg_V_val_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_2_i_i_reg_684 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        srcImg_V_val_1_V_blk_n = srcImg_V_val_1_V_empty_n;
    end else begin
        srcImg_V_val_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_2_i_i_reg_684 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        srcImg_V_val_2_V_blk_n = srcImg_V_val_2_V_empty_n;
    end else begin
        srcImg_V_val_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (1'b0 == HwReg_WidthOut_out_full_n) | (1'b0 == HwReg_Height_out_full_n) | (bPassThruVcr_loc_empty_n == 1'b0) | (1'b0 == HwReg_WidthOut_empty_n) | (1'b0 == HwReg_Height_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_fu_411_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond1_fu_450_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((exitcond1_fu_450_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign HwReg_Height_out_din = HwReg_Height_dout;

assign HwReg_WidthOut_out_din = HwReg_WidthOut_dout;

assign addconv_i_i_fu_532_p2 = (tmp_fu_516_p2 + tmp1_cast_fu_528_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((outImg_V_val_0_V1_status == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (tmp_6_reg_694 == 1'd0)) | ((tmp_2_i_i_reg_684 == 1'd1) & (srcImg_V_val_0_V0_status == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((outImg_V_val_0_V1_status == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (tmp_6_reg_694 == 1'd0)) | ((tmp_2_i_i_reg_684 == 1'd1) & (srcImg_V_val_0_V0_status == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((outImg_V_val_0_V1_status == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (tmp_6_reg_694 == 1'd0)) | ((tmp_2_i_i_reg_684 == 1'd1) & (srcImg_V_val_0_V0_status == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (1'b0 == HwReg_WidthOut_out_full_n) | (1'b0 == HwReg_Height_out_full_n) | (bPassThruVcr_loc_empty_n == 1'b0) | (1'b0 == HwReg_WidthOut_empty_n) | (1'b0 == HwReg_Height_empty_n) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((outImg_V_val_0_V1_status == 1'b0) & (tmp_6_reg_694 == 1'd0));
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter1 = ((tmp_2_i_i_reg_684 == 1'd1) & (srcImg_V_val_0_V0_status == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond1_fu_450_p2 = ((out_x_reg_368 == HwReg_WidthOut_read_reg_643) ? 1'b1 : 1'b0);

assign exitcond_fu_411_p2 = ((y_i_i_reg_357 == tmp_5_reg_665) ? 1'b1 : 1'b0);

assign lhs_V_cast_i_i_fu_504_p1 = linebuf_c_val_1_V_q1;

assign linebuf_c_val_0_V_address0 = tmp_26_i_i_fu_461_p1;

assign linebuf_c_val_1_V_d0 = ((tmp_6_i_i_reg_689[0:0] === 1'b1) ? pixbuf_c_1_val_0_V_reg_745 : pixbuf_c_2_val_0_V_fu_484_p3);

assign not_bPassThru_i_i_fu_383_p2 = (bPassThruVcr_loc_dout ^ 1'd1);

assign outImg_V_val_0_V1_status = (outImg_V_val_2_V_full_n & outImg_V_val_1_V_full_n & outImg_V_val_0_V_full_n);

assign outImg_V_val_0_V_din = tmp_val_0_V_2_reg_730;

assign outImg_V_val_0_V_write = outImg_V_val_0_V1_update;

assign outImg_V_val_1_V_din = ((bPassThruVcr_loc_rea_reg_648[0:0] === 1'b1) ? tmp_val_1_V_fu_226 : outpix_val_1_V_reg_725);

assign outImg_V_val_1_V_write = outImg_V_val_0_V1_update;

assign outImg_V_val_2_V_din = ((bPassThruVcr_loc_rea_reg_648[0:0] === 1'b1) ? tmp_val_2_V_fu_230 : 8'd0);

assign outImg_V_val_2_V_write = outImg_V_val_0_V1_update;

assign out_y_fu_422_p2 = (y_cast_cast_i_i_fu_407_p1 - p_cast_cast_i_i_reg_655);

assign outpix_val_1_V_fu_548_p3 = ((tmp_3_reg_679[0:0] === 1'b1) ? 8'd0 : p_1_i_i_fu_538_p4);

assign p_1_i_i_fu_538_p4 = {{addconv_i_i_fu_532_p2[9:2]}};

assign p_cast_cast_i_i_fu_389_p1 = not_bPassThru_i_i_fu_383_p2;

assign pixbuf_c_2_val_0_V_fu_484_p3 = ((tmp_2_i_i_reg_684[0:0] === 1'b1) ? tmp_val_1_V_1_fu_234 : pixbuf_c_1_val_0_V_reg_745);

assign ret_V_2_i_i_fu_497_p3 = {{pixbuf_c_1_val_0_V_reg_745}, {1'd0}};

assign rhs_V_1_cast_i_i_fu_508_p1 = ret_V_2_i_i_fu_497_p3;

assign rhs_V_2_cast_i_i_cas_fu_512_p1 = pixbuf_c_2_val_0_V_fu_484_p3;

assign srcImg_V_val_0_V0_status = (srcImg_V_val_2_V_empty_n & srcImg_V_val_1_V_empty_n & srcImg_V_val_0_V_empty_n);

assign srcImg_V_val_0_V_read = srcImg_V_val_0_V0_update;

assign srcImg_V_val_1_V_read = srcImg_V_val_0_V0_update;

assign srcImg_V_val_2_V_read = srcImg_V_val_0_V0_update;

assign tmp1_cast_fu_528_p1 = tmp1_fu_522_p2;

assign tmp1_fu_522_p2 = (rhs_V_2_cast_i_i_cas_fu_512_p1 + 9'd2);

assign tmp_1_fu_379_p1 = HwReg_Height_dout[11:0];

assign tmp_26_i_i_fu_461_p1 = out_x_reg_368;

assign tmp_2_fu_393_p1 = not_bPassThru_i_i_fu_383_p2;

assign tmp_2_i_i_fu_431_p2 = ((y_i_i_reg_357 < tmp_4_reg_660) ? 1'b1 : 1'b0);

assign tmp_3_fu_427_p1 = out_y_fu_422_p2[0:0];

assign tmp_4_fu_397_p1 = tmp_1_fu_379_p1;

assign tmp_5_fu_401_p2 = (tmp_4_fu_397_p1 + tmp_2_fu_393_p1);

assign tmp_6_i_i_fu_436_p2 = ((y_i_i_reg_357 != 13'd0) ? 1'b1 : 1'b0);

assign tmp_fu_516_p2 = (lhs_V_cast_i_i_fu_504_p1 + rhs_V_1_cast_i_i_fu_508_p1);

assign tmp_val_0_V_2_fu_558_p3 = ((bPassThruVcr_loc_rea_reg_648[0:0] === 1'b1) ? tmp_val_0_V_fu_222 : linebuf_y_val_0_V_q1);

assign x_fu_455_p2 = (out_x_reg_368 + 12'd1);

assign y_cast_cast_i_i_fu_407_p1 = y_i_i_reg_357;

assign y_fu_416_p2 = (y_i_i_reg_357 + 13'd1);

always @ (posedge ap_clk) begin
    p_cast_cast_i_i_reg_655[13:1] <= 13'b0000000000000;
    tmp_4_reg_660[12] <= 1'b0;
end

endmodule //bd_ed91_hsc_0_v_vcresampler_core
