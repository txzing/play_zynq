// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bd_ed91_hsc_0_MultiPixStream2AXIvi (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        StrmMPix_V_val_0_V_dout,
        StrmMPix_V_val_0_V_empty_n,
        StrmMPix_V_val_0_V_read,
        StrmMPix_V_val_1_V_dout,
        StrmMPix_V_val_1_V_empty_n,
        StrmMPix_V_val_1_V_read,
        StrmMPix_V_val_2_V_dout,
        StrmMPix_V_val_2_V_empty_n,
        StrmMPix_V_val_2_V_read,
        m_axis_video_TDATA,
        m_axis_video_TVALID,
        m_axis_video_TREADY,
        m_axis_video_TKEEP,
        m_axis_video_TSTRB,
        m_axis_video_TUSER,
        m_axis_video_TLAST,
        m_axis_video_TID,
        m_axis_video_TDEST,
        HwReg_Height_dout,
        HwReg_Height_empty_n,
        HwReg_Height_read,
        HwReg_WidthOut_dout,
        HwReg_WidthOut_empty_n,
        HwReg_WidthOut_read,
        HwReg_ColorModeOut_dout,
        HwReg_ColorModeOut_empty_n,
        HwReg_ColorModeOut_read
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_pp0_stage0 = 6'd16;
parameter    ap_ST_fsm_state8 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] StrmMPix_V_val_0_V_dout;
input   StrmMPix_V_val_0_V_empty_n;
output   StrmMPix_V_val_0_V_read;
input  [7:0] StrmMPix_V_val_1_V_dout;
input   StrmMPix_V_val_1_V_empty_n;
output   StrmMPix_V_val_1_V_read;
input  [7:0] StrmMPix_V_val_2_V_dout;
input   StrmMPix_V_val_2_V_empty_n;
output   StrmMPix_V_val_2_V_read;
output  [23:0] m_axis_video_TDATA;
output   m_axis_video_TVALID;
input   m_axis_video_TREADY;
output  [2:0] m_axis_video_TKEEP;
output  [2:0] m_axis_video_TSTRB;
output  [0:0] m_axis_video_TUSER;
output  [0:0] m_axis_video_TLAST;
output  [0:0] m_axis_video_TID;
output  [0:0] m_axis_video_TDEST;
input  [15:0] HwReg_Height_dout;
input   HwReg_Height_empty_n;
output   HwReg_Height_read;
input  [11:0] HwReg_WidthOut_dout;
input   HwReg_WidthOut_empty_n;
output   HwReg_WidthOut_read;
input  [7:0] HwReg_ColorModeOut_dout;
input   HwReg_ColorModeOut_empty_n;
output   HwReg_ColorModeOut_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg HwReg_Height_read;
reg HwReg_WidthOut_read;
reg HwReg_ColorModeOut_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [23:0] AXI_video_strm_V_data_V_1_data_out;
reg    AXI_video_strm_V_data_V_1_vld_in;
wire    AXI_video_strm_V_data_V_1_vld_out;
wire    AXI_video_strm_V_data_V_1_ack_in;
wire    AXI_video_strm_V_data_V_1_ack_out;
reg   [23:0] AXI_video_strm_V_data_V_1_payload_A;
reg   [23:0] AXI_video_strm_V_data_V_1_payload_B;
reg    AXI_video_strm_V_data_V_1_sel_rd;
reg    AXI_video_strm_V_data_V_1_sel_wr;
wire    AXI_video_strm_V_data_V_1_sel;
wire    AXI_video_strm_V_data_V_1_load_A;
wire    AXI_video_strm_V_data_V_1_load_B;
reg   [1:0] AXI_video_strm_V_data_V_1_state;
wire    AXI_video_strm_V_data_V_1_state_cmp_full;
wire   [2:0] AXI_video_strm_V_keep_V_1_data_out;
reg    AXI_video_strm_V_keep_V_1_vld_in;
wire    AXI_video_strm_V_keep_V_1_vld_out;
wire    AXI_video_strm_V_keep_V_1_ack_in;
wire    AXI_video_strm_V_keep_V_1_ack_out;
reg    AXI_video_strm_V_keep_V_1_sel_rd;
wire    AXI_video_strm_V_keep_V_1_sel;
reg   [1:0] AXI_video_strm_V_keep_V_1_state;
wire   [2:0] AXI_video_strm_V_strb_V_1_data_out;
reg    AXI_video_strm_V_strb_V_1_vld_in;
wire    AXI_video_strm_V_strb_V_1_vld_out;
wire    AXI_video_strm_V_strb_V_1_ack_in;
wire    AXI_video_strm_V_strb_V_1_ack_out;
reg    AXI_video_strm_V_strb_V_1_sel_rd;
wire    AXI_video_strm_V_strb_V_1_sel;
reg   [1:0] AXI_video_strm_V_strb_V_1_state;
reg   [0:0] AXI_video_strm_V_user_V_1_data_out;
reg    AXI_video_strm_V_user_V_1_vld_in;
wire    AXI_video_strm_V_user_V_1_vld_out;
wire    AXI_video_strm_V_user_V_1_ack_in;
wire    AXI_video_strm_V_user_V_1_ack_out;
reg   [0:0] AXI_video_strm_V_user_V_1_payload_A;
reg   [0:0] AXI_video_strm_V_user_V_1_payload_B;
reg    AXI_video_strm_V_user_V_1_sel_rd;
reg    AXI_video_strm_V_user_V_1_sel_wr;
wire    AXI_video_strm_V_user_V_1_sel;
wire    AXI_video_strm_V_user_V_1_load_A;
wire    AXI_video_strm_V_user_V_1_load_B;
reg   [1:0] AXI_video_strm_V_user_V_1_state;
wire    AXI_video_strm_V_user_V_1_state_cmp_full;
reg   [0:0] AXI_video_strm_V_last_V_1_data_out;
reg    AXI_video_strm_V_last_V_1_vld_in;
wire    AXI_video_strm_V_last_V_1_vld_out;
wire    AXI_video_strm_V_last_V_1_ack_in;
wire    AXI_video_strm_V_last_V_1_ack_out;
reg   [0:0] AXI_video_strm_V_last_V_1_payload_A;
reg   [0:0] AXI_video_strm_V_last_V_1_payload_B;
reg    AXI_video_strm_V_last_V_1_sel_rd;
reg    AXI_video_strm_V_last_V_1_sel_wr;
wire    AXI_video_strm_V_last_V_1_sel;
wire    AXI_video_strm_V_last_V_1_load_A;
wire    AXI_video_strm_V_last_V_1_load_B;
reg   [1:0] AXI_video_strm_V_last_V_1_state;
wire    AXI_video_strm_V_last_V_1_state_cmp_full;
wire   [0:0] AXI_video_strm_V_id_V_1_data_out;
reg    AXI_video_strm_V_id_V_1_vld_in;
wire    AXI_video_strm_V_id_V_1_vld_out;
wire    AXI_video_strm_V_id_V_1_ack_in;
wire    AXI_video_strm_V_id_V_1_ack_out;
reg    AXI_video_strm_V_id_V_1_sel_rd;
wire    AXI_video_strm_V_id_V_1_sel;
reg   [1:0] AXI_video_strm_V_id_V_1_state;
wire   [0:0] AXI_video_strm_V_dest_V_1_data_out;
reg    AXI_video_strm_V_dest_V_1_vld_in;
wire    AXI_video_strm_V_dest_V_1_vld_out;
wire    AXI_video_strm_V_dest_V_1_ack_in;
wire    AXI_video_strm_V_dest_V_1_ack_out;
reg    AXI_video_strm_V_dest_V_1_sel_rd;
wire    AXI_video_strm_V_dest_V_1_sel;
reg   [1:0] AXI_video_strm_V_dest_V_1_state;
wire   [3:0] mapComp_address0;
reg    mapComp_ce0;
wire   [1:0] mapComp_q0;
reg    StrmMPix_V_val_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond2_i_i_reg_569;
reg    StrmMPix_V_val_1_V_blk_n;
reg    StrmMPix_V_val_2_V_blk_n;
reg    m_axis_video_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] exitcond2_i_i_reg_569_pp0_iter1_reg;
reg    HwReg_Height_blk_n;
reg    HwReg_WidthOut_blk_n;
reg    HwReg_ColorModeOut_blk_n;
reg   [11:0] j_i_i_reg_281;
reg   [11:0] HwReg_WidthOut_read_reg_504;
reg    ap_block_state1;
wire   [11:0] tmp_24_fu_292_p1;
reg   [11:0] tmp_24_reg_510;
wire   [4:0] tmp_9_fu_312_p2;
reg   [4:0] tmp_9_reg_515;
wire   [1:0] i_fu_324_p2;
reg   [1:0] i_reg_523;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_i_i_fu_318_p2;
wire   [11:0] tmp_71_i_i_fu_353_p2;
reg   [11:0] tmp_71_i_i_reg_540;
wire   [1:0] tmp_27_fu_358_p1;
reg   [1:0] tmp_27_reg_545;
wire   [1:0] tmp_28_fu_362_p1;
reg   [1:0] tmp_28_reg_550;
wire   [1:0] tmp_29_fu_366_p1;
reg   [1:0] tmp_29_reg_555;
wire   [0:0] exitcond1_i_i_fu_394_p2;
wire    ap_CS_fsm_state4;
reg    ap_block_state4;
wire   [11:0] i_1_fu_399_p2;
reg   [11:0] i_1_reg_564;
wire   [0:0] exitcond2_i_i_fu_405_p2;
wire    ap_block_state5_pp0_stage0_iter0;
wire    StrmMPix_V_val_0_V0_status;
reg    ap_block_state6_pp0_stage0_iter1;
reg    ap_block_state6_io;
wire    ap_block_state7_pp0_stage0_iter2;
reg    ap_block_state7_io;
reg    ap_block_pp0_stage0_11001;
wire   [11:0] j_fu_410_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_last_V_fu_416_p2;
reg   [0:0] tmp_last_V_reg_578;
wire   [23:0] tmp_data_V_fu_470_p4;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg   [1:0] i_i_i_reg_258;
wire    ap_CS_fsm_state3;
reg   [11:0] i1_i_i_reg_270;
wire    ap_CS_fsm_state8;
wire  signed [63:0] tmp_10_cast_fu_339_p1;
reg    StrmMPix_V_val_0_V0_update;
reg   [3:0] map_V_0_i_i_fu_172;
wire   [3:0] map_0_V_cast_fu_375_p1;
reg   [3:0] map_V_1_i_i_fu_176;
reg   [3:0] map_V_2_i_i_fu_180;
reg   [0:0] tmp_user_V_fu_184;
reg    ap_block_pp0_stage0_01001;
wire   [2:0] tmp_26_fu_300_p1;
wire   [4:0] p_shl_cast_fu_304_p3;
wire   [4:0] tmp_25_fu_296_p1;
wire   [4:0] tmp_72_i_i_cast_fu_330_p1;
wire   [4:0] tmp_3_fu_334_p2;
wire   [7:0] tmp_4_fu_459_p5;
wire   [7:0] tmp_s_fu_448_p5;
wire   [7:0] tmp_fu_437_p5;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 AXI_video_strm_V_data_V_1_sel_rd = 1'b0;
#0 AXI_video_strm_V_data_V_1_sel_wr = 1'b0;
#0 AXI_video_strm_V_data_V_1_state = 2'd0;
#0 AXI_video_strm_V_keep_V_1_sel_rd = 1'b0;
#0 AXI_video_strm_V_keep_V_1_state = 2'd0;
#0 AXI_video_strm_V_strb_V_1_sel_rd = 1'b0;
#0 AXI_video_strm_V_strb_V_1_state = 2'd0;
#0 AXI_video_strm_V_user_V_1_sel_rd = 1'b0;
#0 AXI_video_strm_V_user_V_1_sel_wr = 1'b0;
#0 AXI_video_strm_V_user_V_1_state = 2'd0;
#0 AXI_video_strm_V_last_V_1_sel_rd = 1'b0;
#0 AXI_video_strm_V_last_V_1_sel_wr = 1'b0;
#0 AXI_video_strm_V_last_V_1_state = 2'd0;
#0 AXI_video_strm_V_id_V_1_sel_rd = 1'b0;
#0 AXI_video_strm_V_id_V_1_state = 2'd0;
#0 AXI_video_strm_V_dest_V_1_sel_rd = 1'b0;
#0 AXI_video_strm_V_dest_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

bd_ed91_hsc_0_MultiPixStream2AXIvi_mapComp #(
    .DataWidth( 2 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
mapComp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mapComp_address0),
    .ce0(mapComp_ce0),
    .q0(mapComp_q0)
);

bd_ed91_hsc_0_v_hscaler_mux_32_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
v_hscaler_mux_32_8_1_1_U147(
    .din0(StrmMPix_V_val_0_V_dout),
    .din1(StrmMPix_V_val_1_V_dout),
    .din2(StrmMPix_V_val_2_V_dout),
    .din3(tmp_27_reg_545),
    .dout(tmp_fu_437_p5)
);

bd_ed91_hsc_0_v_hscaler_mux_32_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
v_hscaler_mux_32_8_1_1_U148(
    .din0(StrmMPix_V_val_0_V_dout),
    .din1(StrmMPix_V_val_1_V_dout),
    .din2(StrmMPix_V_val_2_V_dout),
    .din3(tmp_28_reg_550),
    .dout(tmp_s_fu_448_p5)
);

bd_ed91_hsc_0_v_hscaler_mux_32_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
v_hscaler_mux_32_8_1_1_U149(
    .din0(StrmMPix_V_val_0_V_dout),
    .din1(StrmMPix_V_val_1_V_dout),
    .din2(StrmMPix_V_val_2_V_dout),
    .din3(tmp_29_reg_555),
    .dout(tmp_4_fu_459_p5)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_data_V_1_ack_out) & (1'b1 == AXI_video_strm_V_data_V_1_vld_out))) begin
            AXI_video_strm_V_data_V_1_sel_rd <= ~AXI_video_strm_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_data_V_1_ack_in) & (1'b1 == AXI_video_strm_V_data_V_1_vld_in))) begin
            AXI_video_strm_V_data_V_1_sel_wr <= ~AXI_video_strm_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == AXI_video_strm_V_data_V_1_state) & (1'b0 == AXI_video_strm_V_data_V_1_vld_in)) | ((2'd3 == AXI_video_strm_V_data_V_1_state) & (1'b0 == AXI_video_strm_V_data_V_1_vld_in) & (1'b1 == AXI_video_strm_V_data_V_1_ack_out)))) begin
            AXI_video_strm_V_data_V_1_state <= 2'd2;
        end else if ((((2'd1 == AXI_video_strm_V_data_V_1_state) & (1'b0 == AXI_video_strm_V_data_V_1_ack_out)) | ((2'd3 == AXI_video_strm_V_data_V_1_state) & (1'b0 == AXI_video_strm_V_data_V_1_ack_out) & (1'b1 == AXI_video_strm_V_data_V_1_vld_in)))) begin
            AXI_video_strm_V_data_V_1_state <= 2'd1;
        end else if (((~((1'b0 == AXI_video_strm_V_data_V_1_vld_in) & (1'b1 == AXI_video_strm_V_data_V_1_ack_out)) & ~((1'b0 == AXI_video_strm_V_data_V_1_ack_out) & (1'b1 == AXI_video_strm_V_data_V_1_vld_in)) & (2'd3 == AXI_video_strm_V_data_V_1_state)) | ((2'd1 == AXI_video_strm_V_data_V_1_state) & (1'b1 == AXI_video_strm_V_data_V_1_ack_out)) | ((2'd2 == AXI_video_strm_V_data_V_1_state) & (1'b1 == AXI_video_strm_V_data_V_1_vld_in)))) begin
            AXI_video_strm_V_data_V_1_state <= 2'd3;
        end else begin
            AXI_video_strm_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_dest_V_1_ack_out) & (1'b1 == AXI_video_strm_V_dest_V_1_vld_out))) begin
            AXI_video_strm_V_dest_V_1_sel_rd <= ~AXI_video_strm_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == AXI_video_strm_V_dest_V_1_state) & (1'b0 == AXI_video_strm_V_dest_V_1_vld_in)) | ((2'd3 == AXI_video_strm_V_dest_V_1_state) & (1'b0 == AXI_video_strm_V_dest_V_1_vld_in) & (1'b1 == AXI_video_strm_V_dest_V_1_ack_out)))) begin
            AXI_video_strm_V_dest_V_1_state <= 2'd2;
        end else if ((((2'd1 == AXI_video_strm_V_dest_V_1_state) & (1'b0 == AXI_video_strm_V_dest_V_1_ack_out)) | ((2'd3 == AXI_video_strm_V_dest_V_1_state) & (1'b0 == AXI_video_strm_V_dest_V_1_ack_out) & (1'b1 == AXI_video_strm_V_dest_V_1_vld_in)))) begin
            AXI_video_strm_V_dest_V_1_state <= 2'd1;
        end else if (((~((1'b0 == AXI_video_strm_V_dest_V_1_vld_in) & (1'b1 == AXI_video_strm_V_dest_V_1_ack_out)) & ~((1'b0 == AXI_video_strm_V_dest_V_1_ack_out) & (1'b1 == AXI_video_strm_V_dest_V_1_vld_in)) & (2'd3 == AXI_video_strm_V_dest_V_1_state)) | ((2'd1 == AXI_video_strm_V_dest_V_1_state) & (1'b1 == AXI_video_strm_V_dest_V_1_ack_out)) | ((2'd2 == AXI_video_strm_V_dest_V_1_state) & (1'b1 == AXI_video_strm_V_dest_V_1_vld_in)))) begin
            AXI_video_strm_V_dest_V_1_state <= 2'd3;
        end else begin
            AXI_video_strm_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_id_V_1_ack_out) & (1'b1 == AXI_video_strm_V_id_V_1_vld_out))) begin
            AXI_video_strm_V_id_V_1_sel_rd <= ~AXI_video_strm_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == AXI_video_strm_V_id_V_1_state) & (1'b0 == AXI_video_strm_V_id_V_1_vld_in)) | ((2'd3 == AXI_video_strm_V_id_V_1_state) & (1'b0 == AXI_video_strm_V_id_V_1_vld_in) & (1'b1 == AXI_video_strm_V_id_V_1_ack_out)))) begin
            AXI_video_strm_V_id_V_1_state <= 2'd2;
        end else if ((((2'd1 == AXI_video_strm_V_id_V_1_state) & (1'b0 == AXI_video_strm_V_id_V_1_ack_out)) | ((2'd3 == AXI_video_strm_V_id_V_1_state) & (1'b0 == AXI_video_strm_V_id_V_1_ack_out) & (1'b1 == AXI_video_strm_V_id_V_1_vld_in)))) begin
            AXI_video_strm_V_id_V_1_state <= 2'd1;
        end else if (((~((1'b0 == AXI_video_strm_V_id_V_1_vld_in) & (1'b1 == AXI_video_strm_V_id_V_1_ack_out)) & ~((1'b0 == AXI_video_strm_V_id_V_1_ack_out) & (1'b1 == AXI_video_strm_V_id_V_1_vld_in)) & (2'd3 == AXI_video_strm_V_id_V_1_state)) | ((2'd1 == AXI_video_strm_V_id_V_1_state) & (1'b1 == AXI_video_strm_V_id_V_1_ack_out)) | ((2'd2 == AXI_video_strm_V_id_V_1_state) & (1'b1 == AXI_video_strm_V_id_V_1_vld_in)))) begin
            AXI_video_strm_V_id_V_1_state <= 2'd3;
        end else begin
            AXI_video_strm_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_keep_V_1_ack_out) & (1'b1 == AXI_video_strm_V_keep_V_1_vld_out))) begin
            AXI_video_strm_V_keep_V_1_sel_rd <= ~AXI_video_strm_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == AXI_video_strm_V_keep_V_1_state) & (1'b0 == AXI_video_strm_V_keep_V_1_vld_in)) | ((2'd3 == AXI_video_strm_V_keep_V_1_state) & (1'b0 == AXI_video_strm_V_keep_V_1_vld_in) & (1'b1 == AXI_video_strm_V_keep_V_1_ack_out)))) begin
            AXI_video_strm_V_keep_V_1_state <= 2'd2;
        end else if ((((2'd1 == AXI_video_strm_V_keep_V_1_state) & (1'b0 == AXI_video_strm_V_keep_V_1_ack_out)) | ((2'd3 == AXI_video_strm_V_keep_V_1_state) & (1'b0 == AXI_video_strm_V_keep_V_1_ack_out) & (1'b1 == AXI_video_strm_V_keep_V_1_vld_in)))) begin
            AXI_video_strm_V_keep_V_1_state <= 2'd1;
        end else if (((~((1'b0 == AXI_video_strm_V_keep_V_1_vld_in) & (1'b1 == AXI_video_strm_V_keep_V_1_ack_out)) & ~((1'b0 == AXI_video_strm_V_keep_V_1_ack_out) & (1'b1 == AXI_video_strm_V_keep_V_1_vld_in)) & (2'd3 == AXI_video_strm_V_keep_V_1_state)) | ((2'd1 == AXI_video_strm_V_keep_V_1_state) & (1'b1 == AXI_video_strm_V_keep_V_1_ack_out)) | ((2'd2 == AXI_video_strm_V_keep_V_1_state) & (1'b1 == AXI_video_strm_V_keep_V_1_vld_in)))) begin
            AXI_video_strm_V_keep_V_1_state <= 2'd3;
        end else begin
            AXI_video_strm_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_last_V_1_ack_out) & (1'b1 == AXI_video_strm_V_last_V_1_vld_out))) begin
            AXI_video_strm_V_last_V_1_sel_rd <= ~AXI_video_strm_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_last_V_1_ack_in) & (1'b1 == AXI_video_strm_V_last_V_1_vld_in))) begin
            AXI_video_strm_V_last_V_1_sel_wr <= ~AXI_video_strm_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == AXI_video_strm_V_last_V_1_state) & (1'b0 == AXI_video_strm_V_last_V_1_vld_in)) | ((2'd3 == AXI_video_strm_V_last_V_1_state) & (1'b0 == AXI_video_strm_V_last_V_1_vld_in) & (1'b1 == AXI_video_strm_V_last_V_1_ack_out)))) begin
            AXI_video_strm_V_last_V_1_state <= 2'd2;
        end else if ((((2'd1 == AXI_video_strm_V_last_V_1_state) & (1'b0 == AXI_video_strm_V_last_V_1_ack_out)) | ((2'd3 == AXI_video_strm_V_last_V_1_state) & (1'b0 == AXI_video_strm_V_last_V_1_ack_out) & (1'b1 == AXI_video_strm_V_last_V_1_vld_in)))) begin
            AXI_video_strm_V_last_V_1_state <= 2'd1;
        end else if (((~((1'b0 == AXI_video_strm_V_last_V_1_vld_in) & (1'b1 == AXI_video_strm_V_last_V_1_ack_out)) & ~((1'b0 == AXI_video_strm_V_last_V_1_ack_out) & (1'b1 == AXI_video_strm_V_last_V_1_vld_in)) & (2'd3 == AXI_video_strm_V_last_V_1_state)) | ((2'd1 == AXI_video_strm_V_last_V_1_state) & (1'b1 == AXI_video_strm_V_last_V_1_ack_out)) | ((2'd2 == AXI_video_strm_V_last_V_1_state) & (1'b1 == AXI_video_strm_V_last_V_1_vld_in)))) begin
            AXI_video_strm_V_last_V_1_state <= 2'd3;
        end else begin
            AXI_video_strm_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_strb_V_1_ack_out) & (1'b1 == AXI_video_strm_V_strb_V_1_vld_out))) begin
            AXI_video_strm_V_strb_V_1_sel_rd <= ~AXI_video_strm_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == AXI_video_strm_V_strb_V_1_state) & (1'b0 == AXI_video_strm_V_strb_V_1_vld_in)) | ((2'd3 == AXI_video_strm_V_strb_V_1_state) & (1'b0 == AXI_video_strm_V_strb_V_1_vld_in) & (1'b1 == AXI_video_strm_V_strb_V_1_ack_out)))) begin
            AXI_video_strm_V_strb_V_1_state <= 2'd2;
        end else if ((((2'd1 == AXI_video_strm_V_strb_V_1_state) & (1'b0 == AXI_video_strm_V_strb_V_1_ack_out)) | ((2'd3 == AXI_video_strm_V_strb_V_1_state) & (1'b0 == AXI_video_strm_V_strb_V_1_ack_out) & (1'b1 == AXI_video_strm_V_strb_V_1_vld_in)))) begin
            AXI_video_strm_V_strb_V_1_state <= 2'd1;
        end else if (((~((1'b0 == AXI_video_strm_V_strb_V_1_vld_in) & (1'b1 == AXI_video_strm_V_strb_V_1_ack_out)) & ~((1'b0 == AXI_video_strm_V_strb_V_1_ack_out) & (1'b1 == AXI_video_strm_V_strb_V_1_vld_in)) & (2'd3 == AXI_video_strm_V_strb_V_1_state)) | ((2'd1 == AXI_video_strm_V_strb_V_1_state) & (1'b1 == AXI_video_strm_V_strb_V_1_ack_out)) | ((2'd2 == AXI_video_strm_V_strb_V_1_state) & (1'b1 == AXI_video_strm_V_strb_V_1_vld_in)))) begin
            AXI_video_strm_V_strb_V_1_state <= 2'd3;
        end else begin
            AXI_video_strm_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_user_V_1_ack_out) & (1'b1 == AXI_video_strm_V_user_V_1_vld_out))) begin
            AXI_video_strm_V_user_V_1_sel_rd <= ~AXI_video_strm_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_user_V_1_ack_in) & (1'b1 == AXI_video_strm_V_user_V_1_vld_in))) begin
            AXI_video_strm_V_user_V_1_sel_wr <= ~AXI_video_strm_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == AXI_video_strm_V_user_V_1_state) & (1'b0 == AXI_video_strm_V_user_V_1_vld_in)) | ((2'd3 == AXI_video_strm_V_user_V_1_state) & (1'b0 == AXI_video_strm_V_user_V_1_vld_in) & (1'b1 == AXI_video_strm_V_user_V_1_ack_out)))) begin
            AXI_video_strm_V_user_V_1_state <= 2'd2;
        end else if ((((2'd1 == AXI_video_strm_V_user_V_1_state) & (1'b0 == AXI_video_strm_V_user_V_1_ack_out)) | ((2'd3 == AXI_video_strm_V_user_V_1_state) & (1'b0 == AXI_video_strm_V_user_V_1_ack_out) & (1'b1 == AXI_video_strm_V_user_V_1_vld_in)))) begin
            AXI_video_strm_V_user_V_1_state <= 2'd1;
        end else if (((~((1'b0 == AXI_video_strm_V_user_V_1_vld_in) & (1'b1 == AXI_video_strm_V_user_V_1_ack_out)) & ~((1'b0 == AXI_video_strm_V_user_V_1_ack_out) & (1'b1 == AXI_video_strm_V_user_V_1_vld_in)) & (2'd3 == AXI_video_strm_V_user_V_1_state)) | ((2'd1 == AXI_video_strm_V_user_V_1_state) & (1'b1 == AXI_video_strm_V_user_V_1_ack_out)) | ((2'd2 == AXI_video_strm_V_user_V_1_state) & (1'b1 == AXI_video_strm_V_user_V_1_vld_in)))) begin
            AXI_video_strm_V_user_V_1_state <= 2'd3;
        end else begin
            AXI_video_strm_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((1'b0 == AXI_video_strm_V_data_V_1_ack_in) | (1'b0 == AXI_video_strm_V_dest_V_1_ack_in) | (1'b0 == AXI_video_strm_V_id_V_1_ack_in) | (1'b0 == AXI_video_strm_V_last_V_1_ack_in) | (1'b0 == AXI_video_strm_V_user_V_1_ack_in) | (1'b0 == AXI_video_strm_V_strb_V_1_ack_in) | (1'b0 == AXI_video_strm_V_keep_V_1_ack_in)) & (exitcond1_i_i_fu_394_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((1'b0 == AXI_video_strm_V_data_V_1_ack_in) | (1'b0 == AXI_video_strm_V_dest_V_1_ack_in) | (1'b0 == AXI_video_strm_V_id_V_1_ack_in) | (1'b0 == AXI_video_strm_V_last_V_1_ack_in) | (1'b0 == AXI_video_strm_V_user_V_1_ack_in) | (1'b0 == AXI_video_strm_V_strb_V_1_ack_in) | (1'b0 == AXI_video_strm_V_keep_V_1_ack_in)) & (exitcond1_i_i_fu_394_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state5)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state5);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((1'b0 == AXI_video_strm_V_data_V_1_ack_in) | (1'b0 == AXI_video_strm_V_dest_V_1_ack_in) | (1'b0 == AXI_video_strm_V_id_V_1_ack_in) | (1'b0 == AXI_video_strm_V_last_V_1_ack_in) | (1'b0 == AXI_video_strm_V_user_V_1_ack_in) | (1'b0 == AXI_video_strm_V_strb_V_1_ack_in) | (1'b0 == AXI_video_strm_V_keep_V_1_ack_in)) & (exitcond1_i_i_fu_394_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i1_i_i_reg_270 <= i_1_reg_564;
    end else if (((exitcond_i_i_fu_318_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i1_i_i_reg_270 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_i_i_reg_258 <= i_reg_523;
    end else if ((~((1'b0 == HwReg_ColorModeOut_empty_n) | (1'b0 == HwReg_WidthOut_empty_n) | (1'b0 == HwReg_Height_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_i_i_reg_258 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == AXI_video_strm_V_data_V_1_ack_in) | (1'b0 == AXI_video_strm_V_dest_V_1_ack_in) | (1'b0 == AXI_video_strm_V_id_V_1_ack_in) | (1'b0 == AXI_video_strm_V_last_V_1_ack_in) | (1'b0 == AXI_video_strm_V_user_V_1_ack_in) | (1'b0 == AXI_video_strm_V_strb_V_1_ack_in) | (1'b0 == AXI_video_strm_V_keep_V_1_ack_in)) & (exitcond1_i_i_fu_394_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        j_i_i_reg_281 <= 12'd0;
    end else if (((exitcond2_i_i_fu_405_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_i_i_reg_281 <= j_fu_410_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_i_i_reg_569 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_user_V_fu_184 <= 1'd0;
    end else if (((exitcond_i_i_fu_318_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_user_V_fu_184 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_data_V_1_load_A)) begin
        AXI_video_strm_V_data_V_1_payload_A <= tmp_data_V_fu_470_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_data_V_1_load_B)) begin
        AXI_video_strm_V_data_V_1_payload_B <= tmp_data_V_fu_470_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_last_V_1_load_A)) begin
        AXI_video_strm_V_last_V_1_payload_A <= tmp_last_V_reg_578;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_last_V_1_load_B)) begin
        AXI_video_strm_V_last_V_1_payload_B <= tmp_last_V_reg_578;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_user_V_1_load_A)) begin
        AXI_video_strm_V_user_V_1_payload_A <= tmp_user_V_fu_184;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_user_V_1_load_B)) begin
        AXI_video_strm_V_user_V_1_payload_B <= tmp_user_V_fu_184;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == HwReg_ColorModeOut_empty_n) | (1'b0 == HwReg_WidthOut_empty_n) | (1'b0 == HwReg_Height_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_WidthOut_read_reg_504 <= HwReg_WidthOut_dout;
        tmp_24_reg_510 <= tmp_24_fu_292_p1;
        tmp_9_reg_515 <= tmp_9_fu_312_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond2_i_i_reg_569 <= exitcond2_i_i_fu_405_p2;
        exitcond2_i_i_reg_569_pp0_iter1_reg <= exitcond2_i_i_reg_569;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == AXI_video_strm_V_data_V_1_ack_in) | (1'b0 == AXI_video_strm_V_dest_V_1_ack_in) | (1'b0 == AXI_video_strm_V_id_V_1_ack_in) | (1'b0 == AXI_video_strm_V_last_V_1_ack_in) | (1'b0 == AXI_video_strm_V_user_V_1_ack_in) | (1'b0 == AXI_video_strm_V_strb_V_1_ack_in) | (1'b0 == AXI_video_strm_V_keep_V_1_ack_in)) & (1'b1 == ap_CS_fsm_state4))) begin
        i_1_reg_564 <= i_1_fu_399_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_523 <= i_fu_324_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((i_i_i_reg_258 == 2'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        map_V_0_i_i_fu_172[1 : 0] <= map_0_V_cast_fu_375_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((i_i_i_reg_258 == 2'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        map_V_1_i_i_fu_176[1 : 0] <= map_0_V_cast_fu_375_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~(i_i_i_reg_258 == 2'd1) & ~(i_i_i_reg_258 == 2'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        map_V_2_i_i_fu_180[1 : 0] <= map_0_V_cast_fu_375_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_i_fu_318_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_27_reg_545 <= tmp_27_fu_358_p1;
        tmp_28_reg_550 <= tmp_28_fu_362_p1;
        tmp_29_reg_555 <= tmp_29_fu_366_p1;
        tmp_71_i_i_reg_540 <= tmp_71_i_i_fu_353_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_i_i_fu_405_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_last_V_reg_578 <= tmp_last_V_fu_416_p2;
    end
end

always @ (*) begin
    if ((1'b1 == AXI_video_strm_V_data_V_1_sel)) begin
        AXI_video_strm_V_data_V_1_data_out = AXI_video_strm_V_data_V_1_payload_B;
    end else begin
        AXI_video_strm_V_data_V_1_data_out = AXI_video_strm_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond2_i_i_reg_569 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AXI_video_strm_V_data_V_1_vld_in = 1'b1;
    end else begin
        AXI_video_strm_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_i_i_reg_569 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AXI_video_strm_V_dest_V_1_vld_in = 1'b1;
    end else begin
        AXI_video_strm_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_i_i_reg_569 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AXI_video_strm_V_id_V_1_vld_in = 1'b1;
    end else begin
        AXI_video_strm_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_i_i_reg_569 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AXI_video_strm_V_keep_V_1_vld_in = 1'b1;
    end else begin
        AXI_video_strm_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == AXI_video_strm_V_last_V_1_sel)) begin
        AXI_video_strm_V_last_V_1_data_out = AXI_video_strm_V_last_V_1_payload_B;
    end else begin
        AXI_video_strm_V_last_V_1_data_out = AXI_video_strm_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond2_i_i_reg_569 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AXI_video_strm_V_last_V_1_vld_in = 1'b1;
    end else begin
        AXI_video_strm_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_i_i_reg_569 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AXI_video_strm_V_strb_V_1_vld_in = 1'b1;
    end else begin
        AXI_video_strm_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == AXI_video_strm_V_user_V_1_sel)) begin
        AXI_video_strm_V_user_V_1_data_out = AXI_video_strm_V_user_V_1_payload_B;
    end else begin
        AXI_video_strm_V_user_V_1_data_out = AXI_video_strm_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond2_i_i_reg_569 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AXI_video_strm_V_user_V_1_vld_in = 1'b1;
    end else begin
        AXI_video_strm_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_ColorModeOut_blk_n = HwReg_ColorModeOut_empty_n;
    end else begin
        HwReg_ColorModeOut_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == HwReg_ColorModeOut_empty_n) | (1'b0 == HwReg_WidthOut_empty_n) | (1'b0 == HwReg_Height_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_ColorModeOut_read = 1'b1;
    end else begin
        HwReg_ColorModeOut_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_Height_blk_n = HwReg_Height_empty_n;
    end else begin
        HwReg_Height_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == HwReg_ColorModeOut_empty_n) | (1'b0 == HwReg_WidthOut_empty_n) | (1'b0 == HwReg_Height_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_Height_read = 1'b1;
    end else begin
        HwReg_Height_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_WidthOut_blk_n = HwReg_WidthOut_empty_n;
    end else begin
        HwReg_WidthOut_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == HwReg_ColorModeOut_empty_n) | (1'b0 == HwReg_WidthOut_empty_n) | (1'b0 == HwReg_Height_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_WidthOut_read = 1'b1;
    end else begin
        HwReg_WidthOut_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_i_i_reg_569 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        StrmMPix_V_val_0_V0_update = 1'b1;
    end else begin
        StrmMPix_V_val_0_V0_update = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_i_i_reg_569 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        StrmMPix_V_val_0_V_blk_n = StrmMPix_V_val_0_V_empty_n;
    end else begin
        StrmMPix_V_val_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond2_i_i_reg_569 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        StrmMPix_V_val_1_V_blk_n = StrmMPix_V_val_1_V_empty_n;
    end else begin
        StrmMPix_V_val_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond2_i_i_reg_569 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        StrmMPix_V_val_2_V_blk_n = StrmMPix_V_val_2_V_empty_n;
    end else begin
        StrmMPix_V_val_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((exitcond2_i_i_fu_405_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == AXI_video_strm_V_data_V_1_ack_in) | (1'b0 == AXI_video_strm_V_dest_V_1_ack_in) | (1'b0 == AXI_video_strm_V_id_V_1_ack_in) | (1'b0 == AXI_video_strm_V_last_V_1_ack_in) | (1'b0 == AXI_video_strm_V_user_V_1_ack_in) | (1'b0 == AXI_video_strm_V_strb_V_1_ack_in) | (1'b0 == AXI_video_strm_V_keep_V_1_ack_in)) & (exitcond1_i_i_fu_394_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == AXI_video_strm_V_data_V_1_ack_in) | (1'b0 == AXI_video_strm_V_dest_V_1_ack_in) | (1'b0 == AXI_video_strm_V_id_V_1_ack_in) | (1'b0 == AXI_video_strm_V_last_V_1_ack_in) | (1'b0 == AXI_video_strm_V_user_V_1_ack_in) | (1'b0 == AXI_video_strm_V_strb_V_1_ack_in) | (1'b0 == AXI_video_strm_V_keep_V_1_ack_in)) & (exitcond1_i_i_fu_394_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond2_i_i_reg_569_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((exitcond2_i_i_reg_569 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        m_axis_video_TDATA_blk_n = AXI_video_strm_V_data_V_1_state[1'd1];
    end else begin
        m_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mapComp_ce0 = 1'b1;
    end else begin
        mapComp_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == HwReg_ColorModeOut_empty_n) | (1'b0 == HwReg_WidthOut_empty_n) | (1'b0 == HwReg_Height_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_i_i_fu_318_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if ((~((1'b0 == AXI_video_strm_V_data_V_1_ack_in) | (1'b0 == AXI_video_strm_V_dest_V_1_ack_in) | (1'b0 == AXI_video_strm_V_id_V_1_ack_in) | (1'b0 == AXI_video_strm_V_last_V_1_ack_in) | (1'b0 == AXI_video_strm_V_user_V_1_ack_in) | (1'b0 == AXI_video_strm_V_strb_V_1_ack_in) | (1'b0 == AXI_video_strm_V_keep_V_1_ack_in)) & (exitcond1_i_i_fu_394_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((1'b0 == AXI_video_strm_V_data_V_1_ack_in) | (1'b0 == AXI_video_strm_V_dest_V_1_ack_in) | (1'b0 == AXI_video_strm_V_id_V_1_ack_in) | (1'b0 == AXI_video_strm_V_last_V_1_ack_in) | (1'b0 == AXI_video_strm_V_user_V_1_ack_in) | (1'b0 == AXI_video_strm_V_strb_V_1_ack_in) | (1'b0 == AXI_video_strm_V_keep_V_1_ack_in)) & (exitcond1_i_i_fu_394_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond2_i_i_fu_405_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((exitcond2_i_i_fu_405_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AXI_video_strm_V_data_V_1_ack_in = AXI_video_strm_V_data_V_1_state[1'd1];

assign AXI_video_strm_V_data_V_1_ack_out = m_axis_video_TREADY;

assign AXI_video_strm_V_data_V_1_load_A = (~AXI_video_strm_V_data_V_1_sel_wr & AXI_video_strm_V_data_V_1_state_cmp_full);

assign AXI_video_strm_V_data_V_1_load_B = (AXI_video_strm_V_data_V_1_state_cmp_full & AXI_video_strm_V_data_V_1_sel_wr);

assign AXI_video_strm_V_data_V_1_sel = AXI_video_strm_V_data_V_1_sel_rd;

assign AXI_video_strm_V_data_V_1_state_cmp_full = ((AXI_video_strm_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign AXI_video_strm_V_data_V_1_vld_out = AXI_video_strm_V_data_V_1_state[1'd0];

assign AXI_video_strm_V_dest_V_1_ack_in = AXI_video_strm_V_dest_V_1_state[1'd1];

assign AXI_video_strm_V_dest_V_1_ack_out = m_axis_video_TREADY;

assign AXI_video_strm_V_dest_V_1_data_out = 1'd0;

assign AXI_video_strm_V_dest_V_1_sel = AXI_video_strm_V_dest_V_1_sel_rd;

assign AXI_video_strm_V_dest_V_1_vld_out = AXI_video_strm_V_dest_V_1_state[1'd0];

assign AXI_video_strm_V_id_V_1_ack_in = AXI_video_strm_V_id_V_1_state[1'd1];

assign AXI_video_strm_V_id_V_1_ack_out = m_axis_video_TREADY;

assign AXI_video_strm_V_id_V_1_data_out = 1'd0;

assign AXI_video_strm_V_id_V_1_sel = AXI_video_strm_V_id_V_1_sel_rd;

assign AXI_video_strm_V_id_V_1_vld_out = AXI_video_strm_V_id_V_1_state[1'd0];

assign AXI_video_strm_V_keep_V_1_ack_in = AXI_video_strm_V_keep_V_1_state[1'd1];

assign AXI_video_strm_V_keep_V_1_ack_out = m_axis_video_TREADY;

assign AXI_video_strm_V_keep_V_1_data_out = 3'd7;

assign AXI_video_strm_V_keep_V_1_sel = AXI_video_strm_V_keep_V_1_sel_rd;

assign AXI_video_strm_V_keep_V_1_vld_out = AXI_video_strm_V_keep_V_1_state[1'd0];

assign AXI_video_strm_V_last_V_1_ack_in = AXI_video_strm_V_last_V_1_state[1'd1];

assign AXI_video_strm_V_last_V_1_ack_out = m_axis_video_TREADY;

assign AXI_video_strm_V_last_V_1_load_A = (~AXI_video_strm_V_last_V_1_sel_wr & AXI_video_strm_V_last_V_1_state_cmp_full);

assign AXI_video_strm_V_last_V_1_load_B = (AXI_video_strm_V_last_V_1_state_cmp_full & AXI_video_strm_V_last_V_1_sel_wr);

assign AXI_video_strm_V_last_V_1_sel = AXI_video_strm_V_last_V_1_sel_rd;

assign AXI_video_strm_V_last_V_1_state_cmp_full = ((AXI_video_strm_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign AXI_video_strm_V_last_V_1_vld_out = AXI_video_strm_V_last_V_1_state[1'd0];

assign AXI_video_strm_V_strb_V_1_ack_in = AXI_video_strm_V_strb_V_1_state[1'd1];

assign AXI_video_strm_V_strb_V_1_ack_out = m_axis_video_TREADY;

assign AXI_video_strm_V_strb_V_1_data_out = 3'd0;

assign AXI_video_strm_V_strb_V_1_sel = AXI_video_strm_V_strb_V_1_sel_rd;

assign AXI_video_strm_V_strb_V_1_vld_out = AXI_video_strm_V_strb_V_1_state[1'd0];

assign AXI_video_strm_V_user_V_1_ack_in = AXI_video_strm_V_user_V_1_state[1'd1];

assign AXI_video_strm_V_user_V_1_ack_out = m_axis_video_TREADY;

assign AXI_video_strm_V_user_V_1_load_A = (~AXI_video_strm_V_user_V_1_sel_wr & AXI_video_strm_V_user_V_1_state_cmp_full);

assign AXI_video_strm_V_user_V_1_load_B = (AXI_video_strm_V_user_V_1_state_cmp_full & AXI_video_strm_V_user_V_1_sel_wr);

assign AXI_video_strm_V_user_V_1_sel = AXI_video_strm_V_user_V_1_sel_rd;

assign AXI_video_strm_V_user_V_1_state_cmp_full = ((AXI_video_strm_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign AXI_video_strm_V_user_V_1_vld_out = AXI_video_strm_V_user_V_1_state[1'd0];

assign StrmMPix_V_val_0_V0_status = (StrmMPix_V_val_2_V_empty_n & StrmMPix_V_val_1_V_empty_n & StrmMPix_V_val_0_V_empty_n);

assign StrmMPix_V_val_0_V_read = StrmMPix_V_val_0_V0_update;

assign StrmMPix_V_val_1_V_read = StrmMPix_V_val_0_V0_update;

assign StrmMPix_V_val_2_V_read = StrmMPix_V_val_0_V0_update;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((exitcond2_i_i_reg_569 == 1'd0) & (1'b0 == StrmMPix_V_val_0_V0_status) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state7_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state6_io) | ((exitcond2_i_i_reg_569 == 1'd0) & (1'b0 == StrmMPix_V_val_0_V0_status)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state7_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state6_io) | ((exitcond2_i_i_reg_569 == 1'd0) & (1'b0 == StrmMPix_V_val_0_V0_status)))));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == HwReg_ColorModeOut_empty_n) | (1'b0 == HwReg_WidthOut_empty_n) | (1'b0 == HwReg_Height_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state4 = ((1'b0 == AXI_video_strm_V_data_V_1_ack_in) | (1'b0 == AXI_video_strm_V_dest_V_1_ack_in) | (1'b0 == AXI_video_strm_V_id_V_1_ack_in) | (1'b0 == AXI_video_strm_V_last_V_1_ack_in) | (1'b0 == AXI_video_strm_V_user_V_1_ack_in) | (1'b0 == AXI_video_strm_V_strb_V_1_ack_in) | (1'b0 == AXI_video_strm_V_keep_V_1_ack_in));
end

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((exitcond2_i_i_reg_569 == 1'd0) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in));
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter1 = ((exitcond2_i_i_reg_569 == 1'd0) & (1'b0 == StrmMPix_V_val_0_V0_status));
end

always @ (*) begin
    ap_block_state7_io = ((exitcond2_i_i_reg_569_pp0_iter1_reg == 1'd0) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in));
end

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond1_i_i_fu_394_p2 = ((i1_i_i_reg_270 == tmp_24_reg_510) ? 1'b1 : 1'b0);

assign exitcond2_i_i_fu_405_p2 = ((j_i_i_reg_281 == HwReg_WidthOut_read_reg_504) ? 1'b1 : 1'b0);

assign exitcond_i_i_fu_318_p2 = ((i_i_i_reg_258 == 2'd3) ? 1'b1 : 1'b0);

assign i_1_fu_399_p2 = (i1_i_i_reg_270 + 12'd1);

assign i_fu_324_p2 = (i_i_i_reg_258 + 2'd1);

assign j_fu_410_p2 = (j_i_i_reg_281 + 12'd1);

assign m_axis_video_TDATA = AXI_video_strm_V_data_V_1_data_out;

assign m_axis_video_TDEST = AXI_video_strm_V_dest_V_1_data_out;

assign m_axis_video_TID = AXI_video_strm_V_id_V_1_data_out;

assign m_axis_video_TKEEP = AXI_video_strm_V_keep_V_1_data_out;

assign m_axis_video_TLAST = AXI_video_strm_V_last_V_1_data_out;

assign m_axis_video_TSTRB = AXI_video_strm_V_strb_V_1_data_out;

assign m_axis_video_TUSER = AXI_video_strm_V_user_V_1_data_out;

assign m_axis_video_TVALID = AXI_video_strm_V_dest_V_1_state[1'd0];

assign mapComp_address0 = tmp_10_cast_fu_339_p1;

assign map_0_V_cast_fu_375_p1 = mapComp_q0;

assign p_shl_cast_fu_304_p3 = {{tmp_26_fu_300_p1}, {2'd0}};

assign tmp_10_cast_fu_339_p1 = $signed(tmp_3_fu_334_p2);

assign tmp_24_fu_292_p1 = HwReg_Height_dout[11:0];

assign tmp_25_fu_296_p1 = HwReg_ColorModeOut_dout[4:0];

assign tmp_26_fu_300_p1 = HwReg_ColorModeOut_dout[2:0];

assign tmp_27_fu_358_p1 = map_V_0_i_i_fu_172[1:0];

assign tmp_28_fu_362_p1 = map_V_1_i_i_fu_176[1:0];

assign tmp_29_fu_366_p1 = map_V_2_i_i_fu_180[1:0];

assign tmp_3_fu_334_p2 = (tmp_9_reg_515 + tmp_72_i_i_cast_fu_330_p1);

assign tmp_71_i_i_fu_353_p2 = ($signed(12'd4095) + $signed(HwReg_WidthOut_read_reg_504));

assign tmp_72_i_i_cast_fu_330_p1 = i_i_i_reg_258;

assign tmp_9_fu_312_p2 = (p_shl_cast_fu_304_p3 - tmp_25_fu_296_p1);

assign tmp_data_V_fu_470_p4 = {{{tmp_4_fu_459_p5}, {tmp_s_fu_448_p5}}, {tmp_fu_437_p5}};

assign tmp_last_V_fu_416_p2 = ((j_i_i_reg_281 == tmp_71_i_i_reg_540) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    map_V_0_i_i_fu_172[3:2] <= 2'b00;
    map_V_1_i_i_fu_176[3:2] <= 2'b00;
    map_V_2_i_i_fu_180[3:2] <= 2'b00;
end

endmodule //bd_ed91_hsc_0_MultiPixStream2AXIvi
