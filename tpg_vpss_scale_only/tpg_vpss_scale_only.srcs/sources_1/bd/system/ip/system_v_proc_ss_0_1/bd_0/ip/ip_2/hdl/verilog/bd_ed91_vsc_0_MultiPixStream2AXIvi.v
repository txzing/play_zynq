// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bd_ed91_vsc_0_MultiPixStream2AXIvi (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        OutYUV_V_val_0_V_dout,
        OutYUV_V_val_0_V_empty_n,
        OutYUV_V_val_0_V_read,
        OutYUV_V_val_1_V_dout,
        OutYUV_V_val_1_V_empty_n,
        OutYUV_V_val_1_V_read,
        OutYUV_V_val_2_V_dout,
        OutYUV_V_val_2_V_empty_n,
        OutYUV_V_val_2_V_read,
        m_axis_video_TDATA,
        m_axis_video_TVALID,
        m_axis_video_TREADY,
        m_axis_video_TKEEP,
        m_axis_video_TSTRB,
        m_axis_video_TUSER,
        m_axis_video_TLAST,
        m_axis_video_TID,
        m_axis_video_TDEST,
        HwReg_HeightOut,
        HwReg_Width,
        p_HwReg_ColorMode_loc_dout,
        p_HwReg_ColorMode_loc_empty_n,
        p_HwReg_ColorMode_loc_read
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state7 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] OutYUV_V_val_0_V_dout;
input   OutYUV_V_val_0_V_empty_n;
output   OutYUV_V_val_0_V_read;
input  [7:0] OutYUV_V_val_1_V_dout;
input   OutYUV_V_val_1_V_empty_n;
output   OutYUV_V_val_1_V_read;
input  [7:0] OutYUV_V_val_2_V_dout;
input   OutYUV_V_val_2_V_empty_n;
output   OutYUV_V_val_2_V_read;
output  [23:0] m_axis_video_TDATA;
output   m_axis_video_TVALID;
input   m_axis_video_TREADY;
output  [2:0] m_axis_video_TKEEP;
output  [2:0] m_axis_video_TSTRB;
output  [0:0] m_axis_video_TUSER;
output  [0:0] m_axis_video_TLAST;
output  [0:0] m_axis_video_TID;
output  [0:0] m_axis_video_TDEST;
input  [15:0] HwReg_HeightOut;
input  [15:0] HwReg_Width;
input  [7:0] p_HwReg_ColorMode_loc_dout;
input   p_HwReg_ColorMode_loc_empty_n;
output   p_HwReg_ColorMode_loc_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_HwReg_ColorMode_loc_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [23:0] m_axis_video_V_data_V_1_data_out;
reg    m_axis_video_V_data_V_1_vld_in;
wire    m_axis_video_V_data_V_1_vld_out;
wire    m_axis_video_V_data_V_1_ack_in;
wire    m_axis_video_V_data_V_1_ack_out;
reg   [23:0] m_axis_video_V_data_V_1_payload_A;
reg   [23:0] m_axis_video_V_data_V_1_payload_B;
reg    m_axis_video_V_data_V_1_sel_rd;
reg    m_axis_video_V_data_V_1_sel_wr;
wire    m_axis_video_V_data_V_1_sel;
wire    m_axis_video_V_data_V_1_load_A;
wire    m_axis_video_V_data_V_1_load_B;
reg   [1:0] m_axis_video_V_data_V_1_state;
wire    m_axis_video_V_data_V_1_state_cmp_full;
wire   [2:0] m_axis_video_V_keep_V_1_data_out;
reg    m_axis_video_V_keep_V_1_vld_in;
wire    m_axis_video_V_keep_V_1_vld_out;
wire    m_axis_video_V_keep_V_1_ack_in;
wire    m_axis_video_V_keep_V_1_ack_out;
reg    m_axis_video_V_keep_V_1_sel_rd;
wire    m_axis_video_V_keep_V_1_sel;
reg   [1:0] m_axis_video_V_keep_V_1_state;
wire   [2:0] m_axis_video_V_strb_V_1_data_out;
reg    m_axis_video_V_strb_V_1_vld_in;
wire    m_axis_video_V_strb_V_1_vld_out;
wire    m_axis_video_V_strb_V_1_ack_in;
wire    m_axis_video_V_strb_V_1_ack_out;
reg    m_axis_video_V_strb_V_1_sel_rd;
wire    m_axis_video_V_strb_V_1_sel;
reg   [1:0] m_axis_video_V_strb_V_1_state;
reg   [0:0] m_axis_video_V_user_V_1_data_out;
reg    m_axis_video_V_user_V_1_vld_in;
wire    m_axis_video_V_user_V_1_vld_out;
wire    m_axis_video_V_user_V_1_ack_in;
wire    m_axis_video_V_user_V_1_ack_out;
reg   [0:0] m_axis_video_V_user_V_1_payload_A;
reg   [0:0] m_axis_video_V_user_V_1_payload_B;
reg    m_axis_video_V_user_V_1_sel_rd;
reg    m_axis_video_V_user_V_1_sel_wr;
wire    m_axis_video_V_user_V_1_sel;
wire    m_axis_video_V_user_V_1_load_A;
wire    m_axis_video_V_user_V_1_load_B;
reg   [1:0] m_axis_video_V_user_V_1_state;
wire    m_axis_video_V_user_V_1_state_cmp_full;
reg   [0:0] m_axis_video_V_last_V_1_data_out;
reg    m_axis_video_V_last_V_1_vld_in;
wire    m_axis_video_V_last_V_1_vld_out;
wire    m_axis_video_V_last_V_1_ack_in;
wire    m_axis_video_V_last_V_1_ack_out;
reg   [0:0] m_axis_video_V_last_V_1_payload_A;
reg   [0:0] m_axis_video_V_last_V_1_payload_B;
reg    m_axis_video_V_last_V_1_sel_rd;
reg    m_axis_video_V_last_V_1_sel_wr;
wire    m_axis_video_V_last_V_1_sel;
wire    m_axis_video_V_last_V_1_load_A;
wire    m_axis_video_V_last_V_1_load_B;
reg   [1:0] m_axis_video_V_last_V_1_state;
wire    m_axis_video_V_last_V_1_state_cmp_full;
wire   [0:0] m_axis_video_V_id_V_1_data_out;
reg    m_axis_video_V_id_V_1_vld_in;
wire    m_axis_video_V_id_V_1_vld_out;
wire    m_axis_video_V_id_V_1_ack_in;
wire    m_axis_video_V_id_V_1_ack_out;
reg    m_axis_video_V_id_V_1_sel_rd;
wire    m_axis_video_V_id_V_1_sel;
reg   [1:0] m_axis_video_V_id_V_1_state;
wire   [0:0] m_axis_video_V_dest_V_1_data_out;
reg    m_axis_video_V_dest_V_1_vld_in;
wire    m_axis_video_V_dest_V_1_vld_out;
wire    m_axis_video_V_dest_V_1_ack_in;
wire    m_axis_video_V_dest_V_1_ack_out;
reg    m_axis_video_V_dest_V_1_sel_rd;
wire    m_axis_video_V_dest_V_1_sel;
reg   [1:0] m_axis_video_V_dest_V_1_state;
reg    OutYUV_V_val_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond1_i_i_i_reg_506;
reg    OutYUV_V_val_1_V_blk_n;
reg    OutYUV_V_val_2_V_blk_n;
reg    m_axis_video_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] exitcond1_i_i_i_reg_506_pp0_iter1_reg;
reg    p_HwReg_ColorMode_loc_blk_n;
wire    ap_CS_fsm_state2;
reg   [11:0] j_i_i_i_reg_222;
reg    ap_block_state1;
reg   [7:0] p_HwReg_ColorMode_loc_3_reg_478;
wire    grp_reg_unsigned_short_s_fu_277_ap_ready;
wire    grp_reg_unsigned_short_s_fu_277_ap_done;
wire    grp_reg_unsigned_short_s_fu_283_ap_ready;
wire    grp_reg_unsigned_short_s_fu_283_ap_done;
reg    ap_block_state2_on_subcall_done;
wire   [11:0] grp_reg_unsigned_short_s_fu_277_ap_return;
reg   [11:0] tmp_i_i_i_reg_482;
wire   [11:0] grp_reg_unsigned_short_s_fu_283_ap_return;
reg   [11:0] tmp_i_i_i_84_reg_487;
wire   [12:0] tmp_53_i_i_i_fu_298_p2;
reg   [12:0] tmp_53_i_i_i_reg_492;
wire   [0:0] exitcond_i_i_i_fu_304_p2;
wire    ap_CS_fsm_state3;
reg    ap_block_state3;
wire   [11:0] i_fu_309_p2;
reg   [11:0] i_reg_501;
wire   [0:0] exitcond1_i_i_i_fu_319_p2;
wire    ap_block_state4_pp0_stage0_iter0;
wire    OutYUV_V_val_0_V0_status;
reg    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_state5_io;
wire    ap_block_state6_pp0_stage0_iter2;
reg    ap_block_state6_io;
reg    ap_block_pp0_stage0_11001;
wire   [11:0] j_fu_324_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_last_V_fu_330_p2;
reg   [0:0] tmp_last_V_reg_515;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
wire    grp_reg_unsigned_short_s_fu_277_ap_start;
wire    grp_reg_unsigned_short_s_fu_277_ap_idle;
wire   [11:0] grp_reg_unsigned_short_s_fu_277_in_r;
wire    grp_reg_unsigned_short_s_fu_283_ap_start;
wire    grp_reg_unsigned_short_s_fu_283_ap_idle;
wire   [11:0] grp_reg_unsigned_short_s_fu_283_in_r;
reg   [11:0] i_i_i_i_reg_211;
wire    ap_CS_fsm_state7;
reg   [23:0] ap_phi_mux_p_0179_0_2_0_i_i_i_phi_fu_236_p6;
wire   [23:0] p_Result_12_0_i_i_s_fu_365_p3;
wire   [23:0] ap_phi_reg_pp0_iter1_p_0179_0_2_0_i_i_i_reg_233;
wire   [23:0] p_Result_11_0_i_i_s_fu_347_p3;
wire   [23:0] p_Result_0_i_i_i_fu_356_p3;
reg   [23:0] ap_phi_mux_p_0179_0_2_0_1_i_i_i_phi_fu_247_p6;
wire   [23:0] p_Result_12_0_1_i_s_fu_400_p5;
wire   [23:0] ap_phi_reg_pp0_iter1_p_0179_0_2_0_1_i_i_i_reg_244;
wire   [23:0] p_Result_11_0_1_i_s_fu_374_p5;
wire   [23:0] p_Result_0_1_i_i_i_fu_387_p5;
reg   [23:0] ap_phi_mux_tmp_data_V_phi_fu_259_p6;
wire   [23:0] p_Result_12_0_2_i_s_fu_439_p5;
wire   [23:0] ap_phi_reg_pp0_iter1_tmp_data_V_reg_255;
wire   [23:0] p_Result_11_0_2_i_s_fu_413_p5;
wire   [23:0] p_Result_0_2_i_i_i_fu_426_p5;
reg    grp_reg_unsigned_short_s_fu_277_ap_start_reg;
reg    ap_block_state1_ignore_call18;
reg    grp_reg_unsigned_short_s_fu_283_ap_start_reg;
reg    ap_block_state1_ignore_call19;
reg    OutYUV_V_val_0_V0_update;
reg   [0:0] tmp_user_V_fu_150;
reg    ap_block_pp0_stage0_01001;
wire   [12:0] cols_cast_i_i_i_fu_294_p1;
wire   [12:0] j_cast_i_i_i_fu_315_p1;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_469;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 m_axis_video_V_data_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_data_V_1_sel_wr = 1'b0;
#0 m_axis_video_V_data_V_1_state = 2'd0;
#0 m_axis_video_V_keep_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_keep_V_1_state = 2'd0;
#0 m_axis_video_V_strb_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_strb_V_1_state = 2'd0;
#0 m_axis_video_V_user_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_user_V_1_sel_wr = 1'b0;
#0 m_axis_video_V_user_V_1_state = 2'd0;
#0 m_axis_video_V_last_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_last_V_1_sel_wr = 1'b0;
#0 m_axis_video_V_last_V_1_state = 2'd0;
#0 m_axis_video_V_id_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_id_V_1_state = 2'd0;
#0 m_axis_video_V_dest_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_dest_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 grp_reg_unsigned_short_s_fu_277_ap_start_reg = 1'b0;
#0 grp_reg_unsigned_short_s_fu_283_ap_start_reg = 1'b0;
end

bd_ed91_vsc_0_reg_unsigned_short_s grp_reg_unsigned_short_s_fu_277(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reg_unsigned_short_s_fu_277_ap_start),
    .ap_done(grp_reg_unsigned_short_s_fu_277_ap_done),
    .ap_idle(grp_reg_unsigned_short_s_fu_277_ap_idle),
    .ap_ready(grp_reg_unsigned_short_s_fu_277_ap_ready),
    .in_r(grp_reg_unsigned_short_s_fu_277_in_r),
    .ap_return(grp_reg_unsigned_short_s_fu_277_ap_return)
);

bd_ed91_vsc_0_reg_unsigned_short_s grp_reg_unsigned_short_s_fu_283(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reg_unsigned_short_s_fu_283_ap_start),
    .ap_done(grp_reg_unsigned_short_s_fu_283_ap_done),
    .ap_idle(grp_reg_unsigned_short_s_fu_283_ap_idle),
    .ap_ready(grp_reg_unsigned_short_s_fu_283_ap_ready),
    .in_r(grp_reg_unsigned_short_s_fu_283_in_r),
    .ap_return(grp_reg_unsigned_short_s_fu_283_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((m_axis_video_V_data_V_1_ack_in == 1'b0) | (m_axis_video_V_dest_V_1_ack_in == 1'b0) | (m_axis_video_V_id_V_1_ack_in == 1'b0) | (m_axis_video_V_last_V_1_ack_in == 1'b0) | (m_axis_video_V_user_V_1_ack_in == 1'b0) | (m_axis_video_V_strb_V_1_ack_in == 1'b0) | (m_axis_video_V_keep_V_1_ack_in == 1'b0)) & (exitcond_i_i_i_fu_304_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((m_axis_video_V_data_V_1_ack_in == 1'b0) | (m_axis_video_V_dest_V_1_ack_in == 1'b0) | (m_axis_video_V_id_V_1_ack_in == 1'b0) | (m_axis_video_V_last_V_1_ack_in == 1'b0) | (m_axis_video_V_user_V_1_ack_in == 1'b0) | (m_axis_video_V_strb_V_1_ack_in == 1'b0) | (m_axis_video_V_keep_V_1_ack_in == 1'b0)) & (exitcond_i_i_i_fu_304_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state4)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((m_axis_video_V_data_V_1_ack_in == 1'b0) | (m_axis_video_V_dest_V_1_ack_in == 1'b0) | (m_axis_video_V_id_V_1_ack_in == 1'b0) | (m_axis_video_V_last_V_1_ack_in == 1'b0) | (m_axis_video_V_user_V_1_ack_in == 1'b0) | (m_axis_video_V_strb_V_1_ack_in == 1'b0) | (m_axis_video_V_keep_V_1_ack_in == 1'b0)) & (exitcond_i_i_i_fu_304_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reg_unsigned_short_s_fu_277_ap_start_reg <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_reg_unsigned_short_s_fu_277_ap_start_reg <= 1'b1;
        end else if ((grp_reg_unsigned_short_s_fu_277_ap_ready == 1'b1)) begin
            grp_reg_unsigned_short_s_fu_277_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reg_unsigned_short_s_fu_283_ap_start_reg <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_reg_unsigned_short_s_fu_283_ap_start_reg <= 1'b1;
        end else if ((grp_reg_unsigned_short_s_fu_283_ap_ready == 1'b1)) begin
            grp_reg_unsigned_short_s_fu_283_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_video_V_data_V_1_ack_out == 1'b1) & (m_axis_video_V_data_V_1_vld_out == 1'b1))) begin
            m_axis_video_V_data_V_1_sel_rd <= ~m_axis_video_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((m_axis_video_V_data_V_1_ack_in == 1'b1) & (m_axis_video_V_data_V_1_vld_in == 1'b1))) begin
            m_axis_video_V_data_V_1_sel_wr <= ~m_axis_video_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_data_V_1_state == 2'd2) & (m_axis_video_V_data_V_1_vld_in == 1'b0)) | ((m_axis_video_V_data_V_1_state == 2'd3) & (m_axis_video_V_data_V_1_vld_in == 1'b0) & (m_axis_video_V_data_V_1_ack_out == 1'b1)))) begin
            m_axis_video_V_data_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_data_V_1_state == 2'd1) & (m_axis_video_V_data_V_1_ack_out == 1'b0)) | ((m_axis_video_V_data_V_1_state == 2'd3) & (m_axis_video_V_data_V_1_ack_out == 1'b0) & (m_axis_video_V_data_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_data_V_1_state <= 2'd1;
        end else if (((~((m_axis_video_V_data_V_1_vld_in == 1'b0) & (m_axis_video_V_data_V_1_ack_out == 1'b1)) & ~((m_axis_video_V_data_V_1_ack_out == 1'b0) & (m_axis_video_V_data_V_1_vld_in == 1'b1)) & (m_axis_video_V_data_V_1_state == 2'd3)) | ((m_axis_video_V_data_V_1_state == 2'd1) & (m_axis_video_V_data_V_1_ack_out == 1'b1)) | ((m_axis_video_V_data_V_1_state == 2'd2) & (m_axis_video_V_data_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_data_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_video_V_dest_V_1_ack_out == 1'b1) & (m_axis_video_V_dest_V_1_vld_out == 1'b1))) begin
            m_axis_video_V_dest_V_1_sel_rd <= ~m_axis_video_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_dest_V_1_state == 2'd2) & (m_axis_video_V_dest_V_1_vld_in == 1'b0)) | ((m_axis_video_V_dest_V_1_state == 2'd3) & (m_axis_video_V_dest_V_1_vld_in == 1'b0) & (m_axis_video_V_dest_V_1_ack_out == 1'b1)))) begin
            m_axis_video_V_dest_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_dest_V_1_state == 2'd1) & (m_axis_video_V_dest_V_1_ack_out == 1'b0)) | ((m_axis_video_V_dest_V_1_state == 2'd3) & (m_axis_video_V_dest_V_1_ack_out == 1'b0) & (m_axis_video_V_dest_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_dest_V_1_state <= 2'd1;
        end else if (((~((m_axis_video_V_dest_V_1_vld_in == 1'b0) & (m_axis_video_V_dest_V_1_ack_out == 1'b1)) & ~((m_axis_video_V_dest_V_1_ack_out == 1'b0) & (m_axis_video_V_dest_V_1_vld_in == 1'b1)) & (m_axis_video_V_dest_V_1_state == 2'd3)) | ((m_axis_video_V_dest_V_1_state == 2'd1) & (m_axis_video_V_dest_V_1_ack_out == 1'b1)) | ((m_axis_video_V_dest_V_1_state == 2'd2) & (m_axis_video_V_dest_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_dest_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_video_V_id_V_1_ack_out == 1'b1) & (m_axis_video_V_id_V_1_vld_out == 1'b1))) begin
            m_axis_video_V_id_V_1_sel_rd <= ~m_axis_video_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_id_V_1_state == 2'd2) & (m_axis_video_V_id_V_1_vld_in == 1'b0)) | ((m_axis_video_V_id_V_1_state == 2'd3) & (m_axis_video_V_id_V_1_vld_in == 1'b0) & (m_axis_video_V_id_V_1_ack_out == 1'b1)))) begin
            m_axis_video_V_id_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_id_V_1_state == 2'd1) & (m_axis_video_V_id_V_1_ack_out == 1'b0)) | ((m_axis_video_V_id_V_1_state == 2'd3) & (m_axis_video_V_id_V_1_ack_out == 1'b0) & (m_axis_video_V_id_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_id_V_1_state <= 2'd1;
        end else if (((~((m_axis_video_V_id_V_1_vld_in == 1'b0) & (m_axis_video_V_id_V_1_ack_out == 1'b1)) & ~((m_axis_video_V_id_V_1_ack_out == 1'b0) & (m_axis_video_V_id_V_1_vld_in == 1'b1)) & (m_axis_video_V_id_V_1_state == 2'd3)) | ((m_axis_video_V_id_V_1_state == 2'd1) & (m_axis_video_V_id_V_1_ack_out == 1'b1)) | ((m_axis_video_V_id_V_1_state == 2'd2) & (m_axis_video_V_id_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_id_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_video_V_keep_V_1_ack_out == 1'b1) & (m_axis_video_V_keep_V_1_vld_out == 1'b1))) begin
            m_axis_video_V_keep_V_1_sel_rd <= ~m_axis_video_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_keep_V_1_state == 2'd2) & (m_axis_video_V_keep_V_1_vld_in == 1'b0)) | ((m_axis_video_V_keep_V_1_state == 2'd3) & (m_axis_video_V_keep_V_1_vld_in == 1'b0) & (m_axis_video_V_keep_V_1_ack_out == 1'b1)))) begin
            m_axis_video_V_keep_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_keep_V_1_state == 2'd1) & (m_axis_video_V_keep_V_1_ack_out == 1'b0)) | ((m_axis_video_V_keep_V_1_state == 2'd3) & (m_axis_video_V_keep_V_1_ack_out == 1'b0) & (m_axis_video_V_keep_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_keep_V_1_state <= 2'd1;
        end else if (((~((m_axis_video_V_keep_V_1_vld_in == 1'b0) & (m_axis_video_V_keep_V_1_ack_out == 1'b1)) & ~((m_axis_video_V_keep_V_1_ack_out == 1'b0) & (m_axis_video_V_keep_V_1_vld_in == 1'b1)) & (m_axis_video_V_keep_V_1_state == 2'd3)) | ((m_axis_video_V_keep_V_1_state == 2'd1) & (m_axis_video_V_keep_V_1_ack_out == 1'b1)) | ((m_axis_video_V_keep_V_1_state == 2'd2) & (m_axis_video_V_keep_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_keep_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_video_V_last_V_1_ack_out == 1'b1) & (m_axis_video_V_last_V_1_vld_out == 1'b1))) begin
            m_axis_video_V_last_V_1_sel_rd <= ~m_axis_video_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((m_axis_video_V_last_V_1_ack_in == 1'b1) & (m_axis_video_V_last_V_1_vld_in == 1'b1))) begin
            m_axis_video_V_last_V_1_sel_wr <= ~m_axis_video_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_last_V_1_state == 2'd2) & (m_axis_video_V_last_V_1_vld_in == 1'b0)) | ((m_axis_video_V_last_V_1_state == 2'd3) & (m_axis_video_V_last_V_1_vld_in == 1'b0) & (m_axis_video_V_last_V_1_ack_out == 1'b1)))) begin
            m_axis_video_V_last_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_last_V_1_state == 2'd1) & (m_axis_video_V_last_V_1_ack_out == 1'b0)) | ((m_axis_video_V_last_V_1_state == 2'd3) & (m_axis_video_V_last_V_1_ack_out == 1'b0) & (m_axis_video_V_last_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_last_V_1_state <= 2'd1;
        end else if (((~((m_axis_video_V_last_V_1_vld_in == 1'b0) & (m_axis_video_V_last_V_1_ack_out == 1'b1)) & ~((m_axis_video_V_last_V_1_ack_out == 1'b0) & (m_axis_video_V_last_V_1_vld_in == 1'b1)) & (m_axis_video_V_last_V_1_state == 2'd3)) | ((m_axis_video_V_last_V_1_state == 2'd1) & (m_axis_video_V_last_V_1_ack_out == 1'b1)) | ((m_axis_video_V_last_V_1_state == 2'd2) & (m_axis_video_V_last_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_last_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_video_V_strb_V_1_ack_out == 1'b1) & (m_axis_video_V_strb_V_1_vld_out == 1'b1))) begin
            m_axis_video_V_strb_V_1_sel_rd <= ~m_axis_video_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_strb_V_1_state == 2'd2) & (m_axis_video_V_strb_V_1_vld_in == 1'b0)) | ((m_axis_video_V_strb_V_1_state == 2'd3) & (m_axis_video_V_strb_V_1_vld_in == 1'b0) & (m_axis_video_V_strb_V_1_ack_out == 1'b1)))) begin
            m_axis_video_V_strb_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_strb_V_1_state == 2'd1) & (m_axis_video_V_strb_V_1_ack_out == 1'b0)) | ((m_axis_video_V_strb_V_1_state == 2'd3) & (m_axis_video_V_strb_V_1_ack_out == 1'b0) & (m_axis_video_V_strb_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_strb_V_1_state <= 2'd1;
        end else if (((~((m_axis_video_V_strb_V_1_vld_in == 1'b0) & (m_axis_video_V_strb_V_1_ack_out == 1'b1)) & ~((m_axis_video_V_strb_V_1_ack_out == 1'b0) & (m_axis_video_V_strb_V_1_vld_in == 1'b1)) & (m_axis_video_V_strb_V_1_state == 2'd3)) | ((m_axis_video_V_strb_V_1_state == 2'd1) & (m_axis_video_V_strb_V_1_ack_out == 1'b1)) | ((m_axis_video_V_strb_V_1_state == 2'd2) & (m_axis_video_V_strb_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_strb_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_video_V_user_V_1_ack_out == 1'b1) & (m_axis_video_V_user_V_1_vld_out == 1'b1))) begin
            m_axis_video_V_user_V_1_sel_rd <= ~m_axis_video_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((m_axis_video_V_user_V_1_ack_in == 1'b1) & (m_axis_video_V_user_V_1_vld_in == 1'b1))) begin
            m_axis_video_V_user_V_1_sel_wr <= ~m_axis_video_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_user_V_1_state == 2'd2) & (m_axis_video_V_user_V_1_vld_in == 1'b0)) | ((m_axis_video_V_user_V_1_state == 2'd3) & (m_axis_video_V_user_V_1_vld_in == 1'b0) & (m_axis_video_V_user_V_1_ack_out == 1'b1)))) begin
            m_axis_video_V_user_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_user_V_1_state == 2'd1) & (m_axis_video_V_user_V_1_ack_out == 1'b0)) | ((m_axis_video_V_user_V_1_state == 2'd3) & (m_axis_video_V_user_V_1_ack_out == 1'b0) & (m_axis_video_V_user_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_user_V_1_state <= 2'd1;
        end else if (((~((m_axis_video_V_user_V_1_vld_in == 1'b0) & (m_axis_video_V_user_V_1_ack_out == 1'b1)) & ~((m_axis_video_V_user_V_1_ack_out == 1'b0) & (m_axis_video_V_user_V_1_vld_in == 1'b1)) & (m_axis_video_V_user_V_1_state == 2'd3)) | ((m_axis_video_V_user_V_1_state == 2'd1) & (m_axis_video_V_user_V_1_ack_out == 1'b1)) | ((m_axis_video_V_user_V_1_state == 2'd2) & (m_axis_video_V_user_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_user_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_i_i_i_reg_211 <= i_reg_501;
    end else if ((~((p_HwReg_ColorMode_loc_empty_n == 1'b0) | (1'b1 == ap_block_state2_on_subcall_done)) & (1'b1 == ap_CS_fsm_state2))) begin
        i_i_i_i_reg_211 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axis_video_V_data_V_1_ack_in == 1'b0) | (m_axis_video_V_dest_V_1_ack_in == 1'b0) | (m_axis_video_V_id_V_1_ack_in == 1'b0) | (m_axis_video_V_last_V_1_ack_in == 1'b0) | (m_axis_video_V_user_V_1_ack_in == 1'b0) | (m_axis_video_V_strb_V_1_ack_in == 1'b0) | (m_axis_video_V_keep_V_1_ack_in == 1'b0)) & (exitcond_i_i_i_fu_304_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_i_i_i_reg_222 <= 12'd0;
    end else if (((exitcond1_i_i_i_fu_319_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_i_i_i_reg_222 <= j_fu_324_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_i_i_i_reg_506 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_user_V_fu_150 <= 1'd0;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_user_V_fu_150 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond1_i_i_i_reg_506 <= exitcond1_i_i_i_fu_319_p2;
        exitcond1_i_i_i_reg_506_pp0_iter1_reg <= exitcond1_i_i_i_reg_506;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axis_video_V_data_V_1_ack_in == 1'b0) | (m_axis_video_V_dest_V_1_ack_in == 1'b0) | (m_axis_video_V_id_V_1_ack_in == 1'b0) | (m_axis_video_V_last_V_1_ack_in == 1'b0) | (m_axis_video_V_user_V_1_ack_in == 1'b0) | (m_axis_video_V_strb_V_1_ack_in == 1'b0) | (m_axis_video_V_keep_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_501 <= i_fu_309_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_data_V_1_load_A == 1'b1)) begin
        m_axis_video_V_data_V_1_payload_A <= ap_phi_mux_tmp_data_V_phi_fu_259_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_data_V_1_load_B == 1'b1)) begin
        m_axis_video_V_data_V_1_payload_B <= ap_phi_mux_tmp_data_V_phi_fu_259_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_last_V_1_load_A == 1'b1)) begin
        m_axis_video_V_last_V_1_payload_A <= tmp_last_V_reg_515;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_last_V_1_load_B == 1'b1)) begin
        m_axis_video_V_last_V_1_payload_B <= tmp_last_V_reg_515;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_user_V_1_load_A == 1'b1)) begin
        m_axis_video_V_user_V_1_payload_A <= tmp_user_V_fu_150;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_user_V_1_load_B == 1'b1)) begin
        m_axis_video_V_user_V_1_payload_B <= tmp_user_V_fu_150;
    end
end

always @ (posedge ap_clk) begin
    if ((~((p_HwReg_ColorMode_loc_empty_n == 1'b0) | (1'b1 == ap_block_state2_on_subcall_done)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_HwReg_ColorMode_loc_3_reg_478 <= p_HwReg_ColorMode_loc_dout;
        tmp_53_i_i_i_reg_492 <= tmp_53_i_i_i_fu_298_p2;
        tmp_i_i_i_84_reg_487 <= grp_reg_unsigned_short_s_fu_283_ap_return;
        tmp_i_i_i_reg_482 <= grp_reg_unsigned_short_s_fu_277_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_i_i_i_fu_319_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_last_V_reg_515 <= tmp_last_V_fu_330_p2;
    end
end

always @ (*) begin
    if (((exitcond1_i_i_i_reg_506 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OutYUV_V_val_0_V0_update = 1'b1;
    end else begin
        OutYUV_V_val_0_V0_update = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_i_i_i_reg_506 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OutYUV_V_val_0_V_blk_n = OutYUV_V_val_0_V_empty_n;
    end else begin
        OutYUV_V_val_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond1_i_i_i_reg_506 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OutYUV_V_val_1_V_blk_n = OutYUV_V_val_1_V_empty_n;
    end else begin
        OutYUV_V_val_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond1_i_i_i_reg_506 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OutYUV_V_val_2_V_blk_n = OutYUV_V_val_2_V_empty_n;
    end else begin
        OutYUV_V_val_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((exitcond1_i_i_i_fu_319_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axis_video_V_data_V_1_ack_in == 1'b0) | (m_axis_video_V_dest_V_1_ack_in == 1'b0) | (m_axis_video_V_id_V_1_ack_in == 1'b0) | (m_axis_video_V_last_V_1_ack_in == 1'b0) | (m_axis_video_V_user_V_1_ack_in == 1'b0) | (m_axis_video_V_strb_V_1_ack_in == 1'b0) | (m_axis_video_V_keep_V_1_ack_in == 1'b0)) & (exitcond_i_i_i_fu_304_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_469)) begin
        if ((p_HwReg_ColorMode_loc_3_reg_478 == 8'd0)) begin
            ap_phi_mux_p_0179_0_2_0_1_i_i_i_phi_fu_247_p6 = p_Result_0_1_i_i_i_fu_387_p5;
        end else if ((p_HwReg_ColorMode_loc_3_reg_478 == 8'd1)) begin
            ap_phi_mux_p_0179_0_2_0_1_i_i_i_phi_fu_247_p6 = p_Result_11_0_1_i_s_fu_374_p5;
        end else if ((~(p_HwReg_ColorMode_loc_3_reg_478 == 8'd1) & ~(p_HwReg_ColorMode_loc_3_reg_478 == 8'd0))) begin
            ap_phi_mux_p_0179_0_2_0_1_i_i_i_phi_fu_247_p6 = p_Result_12_0_1_i_s_fu_400_p5;
        end else begin
            ap_phi_mux_p_0179_0_2_0_1_i_i_i_phi_fu_247_p6 = ap_phi_reg_pp0_iter1_p_0179_0_2_0_1_i_i_i_reg_244;
        end
    end else begin
        ap_phi_mux_p_0179_0_2_0_1_i_i_i_phi_fu_247_p6 = ap_phi_reg_pp0_iter1_p_0179_0_2_0_1_i_i_i_reg_244;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_469)) begin
        if ((p_HwReg_ColorMode_loc_3_reg_478 == 8'd0)) begin
            ap_phi_mux_p_0179_0_2_0_i_i_i_phi_fu_236_p6 = p_Result_0_i_i_i_fu_356_p3;
        end else if ((p_HwReg_ColorMode_loc_3_reg_478 == 8'd1)) begin
            ap_phi_mux_p_0179_0_2_0_i_i_i_phi_fu_236_p6 = p_Result_11_0_i_i_s_fu_347_p3;
        end else if ((~(p_HwReg_ColorMode_loc_3_reg_478 == 8'd1) & ~(p_HwReg_ColorMode_loc_3_reg_478 == 8'd0))) begin
            ap_phi_mux_p_0179_0_2_0_i_i_i_phi_fu_236_p6 = p_Result_12_0_i_i_s_fu_365_p3;
        end else begin
            ap_phi_mux_p_0179_0_2_0_i_i_i_phi_fu_236_p6 = ap_phi_reg_pp0_iter1_p_0179_0_2_0_i_i_i_reg_233;
        end
    end else begin
        ap_phi_mux_p_0179_0_2_0_i_i_i_phi_fu_236_p6 = ap_phi_reg_pp0_iter1_p_0179_0_2_0_i_i_i_reg_233;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_469)) begin
        if ((p_HwReg_ColorMode_loc_3_reg_478 == 8'd0)) begin
            ap_phi_mux_tmp_data_V_phi_fu_259_p6 = p_Result_0_2_i_i_i_fu_426_p5;
        end else if ((p_HwReg_ColorMode_loc_3_reg_478 == 8'd1)) begin
            ap_phi_mux_tmp_data_V_phi_fu_259_p6 = p_Result_11_0_2_i_s_fu_413_p5;
        end else if ((~(p_HwReg_ColorMode_loc_3_reg_478 == 8'd1) & ~(p_HwReg_ColorMode_loc_3_reg_478 == 8'd0))) begin
            ap_phi_mux_tmp_data_V_phi_fu_259_p6 = p_Result_12_0_2_i_s_fu_439_p5;
        end else begin
            ap_phi_mux_tmp_data_V_phi_fu_259_p6 = ap_phi_reg_pp0_iter1_tmp_data_V_reg_255;
        end
    end else begin
        ap_phi_mux_tmp_data_V_phi_fu_259_p6 = ap_phi_reg_pp0_iter1_tmp_data_V_reg_255;
    end
end

always @ (*) begin
    if ((~((m_axis_video_V_data_V_1_ack_in == 1'b0) | (m_axis_video_V_dest_V_1_ack_in == 1'b0) | (m_axis_video_V_id_V_1_ack_in == 1'b0) | (m_axis_video_V_last_V_1_ack_in == 1'b0) | (m_axis_video_V_user_V_1_ack_in == 1'b0) | (m_axis_video_V_strb_V_1_ack_in == 1'b0) | (m_axis_video_V_keep_V_1_ack_in == 1'b0)) & (exitcond_i_i_i_fu_304_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond1_i_i_i_reg_506_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((exitcond1_i_i_i_reg_506 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        m_axis_video_TDATA_blk_n = m_axis_video_V_data_V_1_state[1'd1];
    end else begin
        m_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((m_axis_video_V_data_V_1_sel == 1'b1)) begin
        m_axis_video_V_data_V_1_data_out = m_axis_video_V_data_V_1_payload_B;
    end else begin
        m_axis_video_V_data_V_1_data_out = m_axis_video_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond1_i_i_i_reg_506 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_V_data_V_1_vld_in = 1'b1;
    end else begin
        m_axis_video_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_i_i_i_reg_506 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_V_dest_V_1_vld_in = 1'b1;
    end else begin
        m_axis_video_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_i_i_i_reg_506 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_V_id_V_1_vld_in = 1'b1;
    end else begin
        m_axis_video_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_i_i_i_reg_506 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_V_keep_V_1_vld_in = 1'b1;
    end else begin
        m_axis_video_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((m_axis_video_V_last_V_1_sel == 1'b1)) begin
        m_axis_video_V_last_V_1_data_out = m_axis_video_V_last_V_1_payload_B;
    end else begin
        m_axis_video_V_last_V_1_data_out = m_axis_video_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond1_i_i_i_reg_506 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_V_last_V_1_vld_in = 1'b1;
    end else begin
        m_axis_video_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_i_i_i_reg_506 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_V_strb_V_1_vld_in = 1'b1;
    end else begin
        m_axis_video_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((m_axis_video_V_user_V_1_sel == 1'b1)) begin
        m_axis_video_V_user_V_1_data_out = m_axis_video_V_user_V_1_payload_B;
    end else begin
        m_axis_video_V_user_V_1_data_out = m_axis_video_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond1_i_i_i_reg_506 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_V_user_V_1_vld_in = 1'b1;
    end else begin
        m_axis_video_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_HwReg_ColorMode_loc_blk_n = p_HwReg_ColorMode_loc_empty_n;
    end else begin
        p_HwReg_ColorMode_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_HwReg_ColorMode_loc_empty_n == 1'b0) | (1'b1 == ap_block_state2_on_subcall_done)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_HwReg_ColorMode_loc_read = 1'b1;
    end else begin
        p_HwReg_ColorMode_loc_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((p_HwReg_ColorMode_loc_empty_n == 1'b0) | (1'b1 == ap_block_state2_on_subcall_done)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((m_axis_video_V_data_V_1_ack_in == 1'b0) | (m_axis_video_V_dest_V_1_ack_in == 1'b0) | (m_axis_video_V_id_V_1_ack_in == 1'b0) | (m_axis_video_V_last_V_1_ack_in == 1'b0) | (m_axis_video_V_user_V_1_ack_in == 1'b0) | (m_axis_video_V_strb_V_1_ack_in == 1'b0) | (m_axis_video_V_keep_V_1_ack_in == 1'b0)) & (exitcond_i_i_i_fu_304_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((m_axis_video_V_data_V_1_ack_in == 1'b0) | (m_axis_video_V_dest_V_1_ack_in == 1'b0) | (m_axis_video_V_id_V_1_ack_in == 1'b0) | (m_axis_video_V_last_V_1_ack_in == 1'b0) | (m_axis_video_V_user_V_1_ack_in == 1'b0) | (m_axis_video_V_strb_V_1_ack_in == 1'b0) | (m_axis_video_V_keep_V_1_ack_in == 1'b0)) & (exitcond_i_i_i_fu_304_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond1_i_i_i_fu_319_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((exitcond1_i_i_i_fu_319_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OutYUV_V_val_0_V0_status = (OutYUV_V_val_2_V_empty_n & OutYUV_V_val_1_V_empty_n & OutYUV_V_val_0_V_empty_n);

assign OutYUV_V_val_0_V_read = OutYUV_V_val_0_V0_update;

assign OutYUV_V_val_1_V_read = OutYUV_V_val_0_V0_update;

assign OutYUV_V_val_2_V_read = OutYUV_V_val_0_V0_update;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((exitcond1_i_i_i_reg_506 == 1'd0) & (1'b0 == OutYUV_V_val_0_V0_status) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state5_io) | ((exitcond1_i_i_i_reg_506 == 1'd0) & (1'b0 == OutYUV_V_val_0_V0_status)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state5_io) | ((exitcond1_i_i_i_reg_506 == 1'd0) & (1'b0 == OutYUV_V_val_0_V0_status)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call18 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call19 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_on_subcall_done = ((grp_reg_unsigned_short_s_fu_283_ap_done == 1'b0) | (grp_reg_unsigned_short_s_fu_277_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state3 = ((m_axis_video_V_data_V_1_ack_in == 1'b0) | (m_axis_video_V_dest_V_1_ack_in == 1'b0) | (m_axis_video_V_id_V_1_ack_in == 1'b0) | (m_axis_video_V_last_V_1_ack_in == 1'b0) | (m_axis_video_V_user_V_1_ack_in == 1'b0) | (m_axis_video_V_strb_V_1_ack_in == 1'b0) | (m_axis_video_V_keep_V_1_ack_in == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((exitcond1_i_i_i_reg_506 == 1'd0) & (m_axis_video_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = ((exitcond1_i_i_i_reg_506 == 1'd0) & (1'b0 == OutYUV_V_val_0_V0_status));
end

always @ (*) begin
    ap_block_state6_io = ((exitcond1_i_i_i_reg_506_pp0_iter1_reg == 1'd0) & (m_axis_video_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_469 = ((exitcond1_i_i_i_reg_506 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter1_p_0179_0_2_0_1_i_i_i_reg_244 = 'bx;

assign ap_phi_reg_pp0_iter1_p_0179_0_2_0_i_i_i_reg_233 = 'bx;

assign ap_phi_reg_pp0_iter1_tmp_data_V_reg_255 = 'bx;

assign cols_cast_i_i_i_fu_294_p1 = grp_reg_unsigned_short_s_fu_283_ap_return;

assign exitcond1_i_i_i_fu_319_p2 = ((j_i_i_i_reg_222 == tmp_i_i_i_84_reg_487) ? 1'b1 : 1'b0);

assign exitcond_i_i_i_fu_304_p2 = ((i_i_i_i_reg_211 == tmp_i_i_i_reg_482) ? 1'b1 : 1'b0);

assign grp_reg_unsigned_short_s_fu_277_ap_start = grp_reg_unsigned_short_s_fu_277_ap_start_reg;

assign grp_reg_unsigned_short_s_fu_277_in_r = HwReg_HeightOut[11:0];

assign grp_reg_unsigned_short_s_fu_283_ap_start = grp_reg_unsigned_short_s_fu_283_ap_start_reg;

assign grp_reg_unsigned_short_s_fu_283_in_r = HwReg_Width[11:0];

assign i_fu_309_p2 = (i_i_i_i_reg_211 + 12'd1);

assign j_cast_i_i_i_fu_315_p1 = j_i_i_i_reg_222;

assign j_fu_324_p2 = (j_i_i_i_reg_222 + 12'd1);

assign m_axis_video_TDATA = m_axis_video_V_data_V_1_data_out;

assign m_axis_video_TDEST = m_axis_video_V_dest_V_1_data_out;

assign m_axis_video_TID = m_axis_video_V_id_V_1_data_out;

assign m_axis_video_TKEEP = m_axis_video_V_keep_V_1_data_out;

assign m_axis_video_TLAST = m_axis_video_V_last_V_1_data_out;

assign m_axis_video_TSTRB = m_axis_video_V_strb_V_1_data_out;

assign m_axis_video_TUSER = m_axis_video_V_user_V_1_data_out;

assign m_axis_video_TVALID = m_axis_video_V_dest_V_1_state[1'd0];

assign m_axis_video_V_data_V_1_ack_in = m_axis_video_V_data_V_1_state[1'd1];

assign m_axis_video_V_data_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_data_V_1_load_A = (m_axis_video_V_data_V_1_state_cmp_full & ~m_axis_video_V_data_V_1_sel_wr);

assign m_axis_video_V_data_V_1_load_B = (m_axis_video_V_data_V_1_state_cmp_full & m_axis_video_V_data_V_1_sel_wr);

assign m_axis_video_V_data_V_1_sel = m_axis_video_V_data_V_1_sel_rd;

assign m_axis_video_V_data_V_1_state_cmp_full = ((m_axis_video_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign m_axis_video_V_data_V_1_vld_out = m_axis_video_V_data_V_1_state[1'd0];

assign m_axis_video_V_dest_V_1_ack_in = m_axis_video_V_dest_V_1_state[1'd1];

assign m_axis_video_V_dest_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_dest_V_1_data_out = 1'd0;

assign m_axis_video_V_dest_V_1_sel = m_axis_video_V_dest_V_1_sel_rd;

assign m_axis_video_V_dest_V_1_vld_out = m_axis_video_V_dest_V_1_state[1'd0];

assign m_axis_video_V_id_V_1_ack_in = m_axis_video_V_id_V_1_state[1'd1];

assign m_axis_video_V_id_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_id_V_1_data_out = 1'd0;

assign m_axis_video_V_id_V_1_sel = m_axis_video_V_id_V_1_sel_rd;

assign m_axis_video_V_id_V_1_vld_out = m_axis_video_V_id_V_1_state[1'd0];

assign m_axis_video_V_keep_V_1_ack_in = m_axis_video_V_keep_V_1_state[1'd1];

assign m_axis_video_V_keep_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_keep_V_1_data_out = 3'd7;

assign m_axis_video_V_keep_V_1_sel = m_axis_video_V_keep_V_1_sel_rd;

assign m_axis_video_V_keep_V_1_vld_out = m_axis_video_V_keep_V_1_state[1'd0];

assign m_axis_video_V_last_V_1_ack_in = m_axis_video_V_last_V_1_state[1'd1];

assign m_axis_video_V_last_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_last_V_1_load_A = (m_axis_video_V_last_V_1_state_cmp_full & ~m_axis_video_V_last_V_1_sel_wr);

assign m_axis_video_V_last_V_1_load_B = (m_axis_video_V_last_V_1_state_cmp_full & m_axis_video_V_last_V_1_sel_wr);

assign m_axis_video_V_last_V_1_sel = m_axis_video_V_last_V_1_sel_rd;

assign m_axis_video_V_last_V_1_state_cmp_full = ((m_axis_video_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign m_axis_video_V_last_V_1_vld_out = m_axis_video_V_last_V_1_state[1'd0];

assign m_axis_video_V_strb_V_1_ack_in = m_axis_video_V_strb_V_1_state[1'd1];

assign m_axis_video_V_strb_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_strb_V_1_data_out = 3'd0;

assign m_axis_video_V_strb_V_1_sel = m_axis_video_V_strb_V_1_sel_rd;

assign m_axis_video_V_strb_V_1_vld_out = m_axis_video_V_strb_V_1_state[1'd0];

assign m_axis_video_V_user_V_1_ack_in = m_axis_video_V_user_V_1_state[1'd1];

assign m_axis_video_V_user_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_user_V_1_load_A = (m_axis_video_V_user_V_1_state_cmp_full & ~m_axis_video_V_user_V_1_sel_wr);

assign m_axis_video_V_user_V_1_load_B = (m_axis_video_V_user_V_1_state_cmp_full & m_axis_video_V_user_V_1_sel_wr);

assign m_axis_video_V_user_V_1_sel = m_axis_video_V_user_V_1_sel_rd;

assign m_axis_video_V_user_V_1_state_cmp_full = ((m_axis_video_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign m_axis_video_V_user_V_1_vld_out = m_axis_video_V_user_V_1_state[1'd0];

assign p_Result_0_1_i_i_i_fu_387_p5 = {{ap_phi_mux_p_0179_0_2_0_i_i_i_phi_fu_236_p6[23:16]}, {OutYUV_V_val_2_V_dout}, {ap_phi_mux_p_0179_0_2_0_i_i_i_phi_fu_236_p6[7:0]}};

assign p_Result_0_2_i_i_i_fu_426_p5 = {{OutYUV_V_val_0_V_dout}, {ap_phi_mux_p_0179_0_2_0_1_i_i_i_phi_fu_247_p6[15:0]}};

assign p_Result_0_i_i_i_fu_356_p3 = {{16'd65535}, {OutYUV_V_val_1_V_dout}};

assign p_Result_11_0_1_i_s_fu_374_p5 = {{ap_phi_mux_p_0179_0_2_0_i_i_i_phi_fu_236_p6[23:16]}, {OutYUV_V_val_1_V_dout}, {ap_phi_mux_p_0179_0_2_0_i_i_i_phi_fu_236_p6[7:0]}};

assign p_Result_11_0_2_i_s_fu_413_p5 = {{OutYUV_V_val_2_V_dout}, {ap_phi_mux_p_0179_0_2_0_1_i_i_i_phi_fu_247_p6[15:0]}};

assign p_Result_11_0_i_i_s_fu_347_p3 = {{16'd65535}, {OutYUV_V_val_0_V_dout}};

assign p_Result_12_0_1_i_s_fu_400_p5 = {{ap_phi_mux_p_0179_0_2_0_i_i_i_phi_fu_236_p6[23:16]}, {OutYUV_V_val_1_V_dout}, {ap_phi_mux_p_0179_0_2_0_i_i_i_phi_fu_236_p6[7:0]}};

assign p_Result_12_0_2_i_s_fu_439_p5 = {{OutYUV_V_val_2_V_dout}, {ap_phi_mux_p_0179_0_2_0_1_i_i_i_phi_fu_247_p6[15:0]}};

assign p_Result_12_0_i_i_s_fu_365_p3 = {{16'd65535}, {OutYUV_V_val_0_V_dout}};

assign tmp_53_i_i_i_fu_298_p2 = ($signed(13'd8191) + $signed(cols_cast_i_i_i_fu_294_p1));

assign tmp_last_V_fu_330_p2 = ((j_cast_i_i_i_fu_315_p1 == tmp_53_i_i_i_reg_492) ? 1'b1 : 1'b0);

endmodule //bd_ed91_vsc_0_MultiPixStream2AXIvi
